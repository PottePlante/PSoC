ARM GAS  C:\temp\ccYxUzzJ.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"UART_INT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.UART_RXISR,"ax",%progbits
  18              		.align	1
  19              		.global	UART_RXISR
  20              		.code	16
  21              		.thumb_func
  22              		.type	UART_RXISR, %function
  23              	UART_RXISR:
  24              	.LFB0:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\UART_INT.c"
   1:.\Generated_Source\PSoC4/UART_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/UART_INT.c **** * File Name: UARTINT.c
   3:.\Generated_Source\PSoC4/UART_INT.c **** * Version 2.50
   4:.\Generated_Source\PSoC4/UART_INT.c **** *
   5:.\Generated_Source\PSoC4/UART_INT.c **** * Description:
   6:.\Generated_Source\PSoC4/UART_INT.c **** *  This file provides all Interrupt Service functionality of the UART component
   7:.\Generated_Source\PSoC4/UART_INT.c **** *
   8:.\Generated_Source\PSoC4/UART_INT.c **** ********************************************************************************
   9:.\Generated_Source\PSoC4/UART_INT.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  10:.\Generated_Source\PSoC4/UART_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  11:.\Generated_Source\PSoC4/UART_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  12:.\Generated_Source\PSoC4/UART_INT.c **** * the software package with which this file was provided.
  13:.\Generated_Source\PSoC4/UART_INT.c **** *******************************************************************************/
  14:.\Generated_Source\PSoC4/UART_INT.c **** 
  15:.\Generated_Source\PSoC4/UART_INT.c **** #include "UART.h"
  16:.\Generated_Source\PSoC4/UART_INT.c **** #include "cyapicallbacks.h"
  17:.\Generated_Source\PSoC4/UART_INT.c **** 
  18:.\Generated_Source\PSoC4/UART_INT.c **** 
  19:.\Generated_Source\PSoC4/UART_INT.c **** /***************************************
  20:.\Generated_Source\PSoC4/UART_INT.c **** * Custom Declarations
  21:.\Generated_Source\PSoC4/UART_INT.c **** ***************************************/
  22:.\Generated_Source\PSoC4/UART_INT.c **** /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  23:.\Generated_Source\PSoC4/UART_INT.c **** 
  24:.\Generated_Source\PSoC4/UART_INT.c **** /* `#END` */
  25:.\Generated_Source\PSoC4/UART_INT.c **** 
  26:.\Generated_Source\PSoC4/UART_INT.c **** #if (UART_RX_INTERRUPT_ENABLED && (UART_RX_ENABLED || UART_HD_ENABLED))
  27:.\Generated_Source\PSoC4/UART_INT.c ****     /*******************************************************************************
  28:.\Generated_Source\PSoC4/UART_INT.c ****     * Function Name: UART_RXISR
  29:.\Generated_Source\PSoC4/UART_INT.c ****     ********************************************************************************
  30:.\Generated_Source\PSoC4/UART_INT.c ****     *
  31:.\Generated_Source\PSoC4/UART_INT.c ****     * Summary:
  32:.\Generated_Source\PSoC4/UART_INT.c ****     *  Interrupt Service Routine for RX portion of the UART
ARM GAS  C:\temp\ccYxUzzJ.s 			page 2


  33:.\Generated_Source\PSoC4/UART_INT.c ****     *
  34:.\Generated_Source\PSoC4/UART_INT.c ****     * Parameters:
  35:.\Generated_Source\PSoC4/UART_INT.c ****     *  None.
  36:.\Generated_Source\PSoC4/UART_INT.c ****     *
  37:.\Generated_Source\PSoC4/UART_INT.c ****     * Return:
  38:.\Generated_Source\PSoC4/UART_INT.c ****     *  None.
  39:.\Generated_Source\PSoC4/UART_INT.c ****     *
  40:.\Generated_Source\PSoC4/UART_INT.c ****     * Global Variables:
  41:.\Generated_Source\PSoC4/UART_INT.c ****     *  UART_rxBuffer - RAM buffer pointer for save received data.
  42:.\Generated_Source\PSoC4/UART_INT.c ****     *  UART_rxBufferWrite - cyclic index for write to rxBuffer,
  43:.\Generated_Source\PSoC4/UART_INT.c ****     *     increments after each byte saved to buffer.
  44:.\Generated_Source\PSoC4/UART_INT.c ****     *  UART_rxBufferRead - cyclic index for read from rxBuffer,
  45:.\Generated_Source\PSoC4/UART_INT.c ****     *     checked to detect overflow condition.
  46:.\Generated_Source\PSoC4/UART_INT.c ****     *  UART_rxBufferOverflow - software overflow flag. Set to one
  47:.\Generated_Source\PSoC4/UART_INT.c ****     *     when UART_rxBufferWrite index overtakes
  48:.\Generated_Source\PSoC4/UART_INT.c ****     *     UART_rxBufferRead index.
  49:.\Generated_Source\PSoC4/UART_INT.c ****     *  UART_rxBufferLoopDetect - additional variable to detect overflow.
  50:.\Generated_Source\PSoC4/UART_INT.c ****     *     Set to one when UART_rxBufferWrite is equal to
  51:.\Generated_Source\PSoC4/UART_INT.c ****     *    UART_rxBufferRead
  52:.\Generated_Source\PSoC4/UART_INT.c ****     *  UART_rxAddressMode - this variable contains the Address mode,
  53:.\Generated_Source\PSoC4/UART_INT.c ****     *     selected in customizer or set by UART_SetRxAddressMode() API.
  54:.\Generated_Source\PSoC4/UART_INT.c ****     *  UART_rxAddressDetected - set to 1 when correct address received,
  55:.\Generated_Source\PSoC4/UART_INT.c ****     *     and analysed to store following addressed data bytes to the buffer.
  56:.\Generated_Source\PSoC4/UART_INT.c ****     *     When not correct address received, set to 0 to skip following data bytes.
  57:.\Generated_Source\PSoC4/UART_INT.c ****     *
  58:.\Generated_Source\PSoC4/UART_INT.c ****     *******************************************************************************/
  59:.\Generated_Source\PSoC4/UART_INT.c ****     CY_ISR(UART_RXISR)
  60:.\Generated_Source\PSoC4/UART_INT.c ****     {
  26              		.loc 1 60 0
  27              		.cfi_startproc
  28              	.L7:
  61:.\Generated_Source\PSoC4/UART_INT.c ****         uint8 readData;
  62:.\Generated_Source\PSoC4/UART_INT.c ****         uint8 readStatus;
  63:.\Generated_Source\PSoC4/UART_INT.c ****         uint8 increment_pointer = 0u;
  64:.\Generated_Source\PSoC4/UART_INT.c **** 
  65:.\Generated_Source\PSoC4/UART_INT.c ****     #if(CY_PSOC3)
  66:.\Generated_Source\PSoC4/UART_INT.c ****         uint8 int_en;
  67:.\Generated_Source\PSoC4/UART_INT.c ****     #endif /* (CY_PSOC3) */
  68:.\Generated_Source\PSoC4/UART_INT.c **** 
  69:.\Generated_Source\PSoC4/UART_INT.c ****     #ifdef UART_RXISR_ENTRY_CALLBACK
  70:.\Generated_Source\PSoC4/UART_INT.c ****         UART_RXISR_EntryCallback();
  71:.\Generated_Source\PSoC4/UART_INT.c ****     #endif /* UART_RXISR_ENTRY_CALLBACK */
  72:.\Generated_Source\PSoC4/UART_INT.c **** 
  73:.\Generated_Source\PSoC4/UART_INT.c ****         /* User code required at start of ISR */
  74:.\Generated_Source\PSoC4/UART_INT.c ****         /* `#START UART_RXISR_START` */
  75:.\Generated_Source\PSoC4/UART_INT.c **** 
  76:.\Generated_Source\PSoC4/UART_INT.c ****         /* `#END` */
  77:.\Generated_Source\PSoC4/UART_INT.c **** 
  78:.\Generated_Source\PSoC4/UART_INT.c ****     #if(CY_PSOC3)   /* Make sure nested interrupt is enabled */
  79:.\Generated_Source\PSoC4/UART_INT.c ****         int_en = EA;
  80:.\Generated_Source\PSoC4/UART_INT.c ****         CyGlobalIntEnable;
  81:.\Generated_Source\PSoC4/UART_INT.c ****     #endif /* (CY_PSOC3) */
  82:.\Generated_Source\PSoC4/UART_INT.c **** 
  83:.\Generated_Source\PSoC4/UART_INT.c ****         do
  84:.\Generated_Source\PSoC4/UART_INT.c ****         {
  85:.\Generated_Source\PSoC4/UART_INT.c ****             /* Read receiver status register */
  86:.\Generated_Source\PSoC4/UART_INT.c ****             readStatus = UART_RXSTATUS_REG;
ARM GAS  C:\temp\ccYxUzzJ.s 			page 3


  87:.\Generated_Source\PSoC4/UART_INT.c ****             /* Copy the same status to readData variable for backward compatibility support 
  88:.\Generated_Source\PSoC4/UART_INT.c ****             *  of the user code in UART_RXISR_ERROR` section. 
  89:.\Generated_Source\PSoC4/UART_INT.c ****             */
  90:.\Generated_Source\PSoC4/UART_INT.c ****             readData = readStatus;
  91:.\Generated_Source\PSoC4/UART_INT.c **** 
  92:.\Generated_Source\PSoC4/UART_INT.c ****             if((readStatus & (UART_RX_STS_BREAK | 
  93:.\Generated_Source\PSoC4/UART_INT.c ****                             UART_RX_STS_PAR_ERROR |
  94:.\Generated_Source\PSoC4/UART_INT.c ****                             UART_RX_STS_STOP_ERROR | 
  95:.\Generated_Source\PSoC4/UART_INT.c ****                             UART_RX_STS_OVERRUN)) != 0u)
  29              		.loc 1 95 0
  30 0000 1E22     		mov	r2, #30
  86:.\Generated_Source\PSoC4/UART_INT.c ****             /* Copy the same status to readData variable for backward compatibility support 
  31              		.loc 1 86 0
  32 0002 164B     		ldr	r3, .L15
  33 0004 1B78     		ldrb	r3, [r3]
  34 0006 DBB2     		uxtb	r3, r3
  35              	.LVL0:
  36              		.loc 1 95 0
  37 0008 1A40     		and	r2, r3
  92:.\Generated_Source\PSoC4/UART_INT.c ****                             UART_RX_STS_PAR_ERROR |
  38              		.loc 1 92 0
  39 000a 03D0     		beq	.L2
  96:.\Generated_Source\PSoC4/UART_INT.c ****             {
  97:.\Generated_Source\PSoC4/UART_INT.c ****                 /* ERROR handling. */
  98:.\Generated_Source\PSoC4/UART_INT.c ****                 UART_errorStatus |= readStatus & ( UART_RX_STS_BREAK | 
  40              		.loc 1 98 0
  41 000c 1448     		ldr	r0, .L15+4
  42 000e 0178     		ldrb	r1, [r0]
  43 0010 0A43     		orr	r2, r1
  44 0012 0270     		strb	r2, [r0]
  45              	.L2:
  99:.\Generated_Source\PSoC4/UART_INT.c ****                                                             UART_RX_STS_PAR_ERROR | 
 100:.\Generated_Source\PSoC4/UART_INT.c ****                                                             UART_RX_STS_STOP_ERROR | 
 101:.\Generated_Source\PSoC4/UART_INT.c ****                                                             UART_RX_STS_OVERRUN);
 102:.\Generated_Source\PSoC4/UART_INT.c ****                 /* `#START UART_RXISR_ERROR` */
 103:.\Generated_Source\PSoC4/UART_INT.c **** 
 104:.\Generated_Source\PSoC4/UART_INT.c ****                 /* `#END` */
 105:.\Generated_Source\PSoC4/UART_INT.c ****                 
 106:.\Generated_Source\PSoC4/UART_INT.c ****             #ifdef UART_RXISR_ERROR_CALLBACK
 107:.\Generated_Source\PSoC4/UART_INT.c ****                 UART_RXISR_ERROR_Callback();
 108:.\Generated_Source\PSoC4/UART_INT.c ****             #endif /* UART_RXISR_ERROR_CALLBACK */
 109:.\Generated_Source\PSoC4/UART_INT.c ****             }
 110:.\Generated_Source\PSoC4/UART_INT.c ****             
 111:.\Generated_Source\PSoC4/UART_INT.c ****             if((readStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u)
  46              		.loc 1 111 0
  47 0014 9B06     		lsl	r3, r3, #26
  48 0016 1FD5     		bpl	.L1
  49              	.LVL1:
 112:.\Generated_Source\PSoC4/UART_INT.c ****             {
 113:.\Generated_Source\PSoC4/UART_INT.c ****                 /* Read data from the RX data register */
 114:.\Generated_Source\PSoC4/UART_INT.c ****                 readData = UART_RXDATA_REG;
  50              		.loc 1 114 0
  51 0018 124B     		ldr	r3, .L15+8
 115:.\Generated_Source\PSoC4/UART_INT.c ****             #if (UART_RXHW_ADDRESS_ENABLED)
 116:.\Generated_Source\PSoC4/UART_INT.c ****                 if(UART_rxAddressMode == (uint8)UART__B_UART__AM_SW_DETECT_TO_BUFFER)
 117:.\Generated_Source\PSoC4/UART_INT.c ****                 {
 118:.\Generated_Source\PSoC4/UART_INT.c ****                     if((readStatus & UART_RX_STS_MRKSPC) != 0u)
ARM GAS  C:\temp\ccYxUzzJ.s 			page 4


 119:.\Generated_Source\PSoC4/UART_INT.c ****                     {
 120:.\Generated_Source\PSoC4/UART_INT.c ****                         if ((readStatus & UART_RX_STS_ADDR_MATCH) != 0u)
 121:.\Generated_Source\PSoC4/UART_INT.c ****                         {
 122:.\Generated_Source\PSoC4/UART_INT.c ****                             UART_rxAddressDetected = 1u;
 123:.\Generated_Source\PSoC4/UART_INT.c ****                         }
 124:.\Generated_Source\PSoC4/UART_INT.c ****                         else
 125:.\Generated_Source\PSoC4/UART_INT.c ****                         {
 126:.\Generated_Source\PSoC4/UART_INT.c ****                             UART_rxAddressDetected = 0u;
 127:.\Generated_Source\PSoC4/UART_INT.c ****                         }
 128:.\Generated_Source\PSoC4/UART_INT.c ****                     }
 129:.\Generated_Source\PSoC4/UART_INT.c ****                     if(UART_rxAddressDetected != 0u)
 130:.\Generated_Source\PSoC4/UART_INT.c ****                     {   /* Store only addressed data */
 131:.\Generated_Source\PSoC4/UART_INT.c ****                         UART_rxBuffer[UART_rxBufferWrite] = readData;
 132:.\Generated_Source\PSoC4/UART_INT.c ****                         increment_pointer = 1u;
 133:.\Generated_Source\PSoC4/UART_INT.c ****                     }
 134:.\Generated_Source\PSoC4/UART_INT.c ****                 }
 135:.\Generated_Source\PSoC4/UART_INT.c ****                 else /* Without software addressing */
 136:.\Generated_Source\PSoC4/UART_INT.c ****                 {
 137:.\Generated_Source\PSoC4/UART_INT.c ****                     UART_rxBuffer[UART_rxBufferWrite] = readData;
 138:.\Generated_Source\PSoC4/UART_INT.c ****                     increment_pointer = 1u;
 139:.\Generated_Source\PSoC4/UART_INT.c ****                 }
 140:.\Generated_Source\PSoC4/UART_INT.c ****             #else  /* Without addressing */
 141:.\Generated_Source\PSoC4/UART_INT.c ****                 UART_rxBuffer[UART_rxBufferWrite] = readData;
  52              		.loc 1 141 0
  53 001a 1348     		ldr	r0, .L15+12
 114:.\Generated_Source\PSoC4/UART_INT.c ****             #if (UART_RXHW_ADDRESS_ENABLED)
  54              		.loc 1 114 0
  55 001c 1978     		ldrb	r1, [r3]
  56              		.loc 1 141 0
  57 001e 134B     		ldr	r3, .L15+16
 114:.\Generated_Source\PSoC4/UART_INT.c ****             #if (UART_RXHW_ADDRESS_ENABLED)
  58              		.loc 1 114 0
  59 0020 C9B2     		uxtb	r1, r1
  60              	.LVL2:
  61              		.loc 1 141 0
  62 0022 1A78     		ldrb	r2, [r3]
  63 0024 D2B2     		uxtb	r2, r2
  64 0026 8154     		strb	r1, [r0, r2]
  65              	.LVL3:
 142:.\Generated_Source\PSoC4/UART_INT.c ****                 increment_pointer = 1u;
 143:.\Generated_Source\PSoC4/UART_INT.c ****             #endif /* (UART_RXHW_ADDRESS_ENABLED) */
 144:.\Generated_Source\PSoC4/UART_INT.c **** 
 145:.\Generated_Source\PSoC4/UART_INT.c ****                 /* Do not increment buffer pointer when skip not addressed data */
 146:.\Generated_Source\PSoC4/UART_INT.c ****                 if(increment_pointer != 0u)
 147:.\Generated_Source\PSoC4/UART_INT.c ****                 {
 148:.\Generated_Source\PSoC4/UART_INT.c ****                     if(UART_rxBufferLoopDetect != 0u)
  66              		.loc 1 148 0
  67 0028 1149     		ldr	r1, .L15+20
  68              	.LVL4:
  69 002a 0A78     		ldrb	r2, [r1]
  70              	.LVL5:
  71 002c 002A     		cmp	r2, #0
  72 002e 02D0     		beq	.L4
 149:.\Generated_Source\PSoC4/UART_INT.c ****                     {   /* Set Software Buffer status Overflow */
 150:.\Generated_Source\PSoC4/UART_INT.c ****                         UART_rxBufferOverflow = 1u;
  73              		.loc 1 150 0
  74 0030 0120     		mov	r0, #1
ARM GAS  C:\temp\ccYxUzzJ.s 			page 5


  75 0032 104A     		ldr	r2, .L15+24
  76 0034 1070     		strb	r0, [r2]
  77              	.L4:
 151:.\Generated_Source\PSoC4/UART_INT.c ****                     }
 152:.\Generated_Source\PSoC4/UART_INT.c ****                     /* Set next pointer. */
 153:.\Generated_Source\PSoC4/UART_INT.c ****                     UART_rxBufferWrite++;
  78              		.loc 1 153 0
  79 0036 1A78     		ldrb	r2, [r3]
  80 0038 0132     		add	r2, r2, #1
  81 003a D2B2     		uxtb	r2, r2
  82 003c 1A70     		strb	r2, [r3]
 154:.\Generated_Source\PSoC4/UART_INT.c **** 
 155:.\Generated_Source\PSoC4/UART_INT.c ****                     /* Check pointer for a loop condition */
 156:.\Generated_Source\PSoC4/UART_INT.c ****                     if(UART_rxBufferWrite >= UART_RX_BUFFER_SIZE)
  83              		.loc 1 156 0
  84 003e 1A78     		ldrb	r2, [r3]
  85 0040 FF2A     		cmp	r2, #255
  86 0042 01D1     		bne	.L5
 157:.\Generated_Source\PSoC4/UART_INT.c ****                     {
 158:.\Generated_Source\PSoC4/UART_INT.c ****                         UART_rxBufferWrite = 0u;
  87              		.loc 1 158 0
  88 0044 0022     		mov	r2, #0
  89 0046 1A70     		strb	r2, [r3]
  90              	.L5:
 159:.\Generated_Source\PSoC4/UART_INT.c ****                     }
 160:.\Generated_Source\PSoC4/UART_INT.c **** 
 161:.\Generated_Source\PSoC4/UART_INT.c ****                     /* Detect pre-overload condition and set flag */
 162:.\Generated_Source\PSoC4/UART_INT.c ****                     if(UART_rxBufferWrite == UART_rxBufferRead)
  91              		.loc 1 162 0
  92 0048 1A78     		ldrb	r2, [r3]
  93 004a 0B4B     		ldr	r3, .L15+28
  94 004c 1B78     		ldrb	r3, [r3]
  95 004e 9A42     		cmp	r2, r3
  96 0050 D6D1     		bne	.L7
 163:.\Generated_Source\PSoC4/UART_INT.c ****                     {
 164:.\Generated_Source\PSoC4/UART_INT.c ****                         UART_rxBufferLoopDetect = 1u;
  97              		.loc 1 164 0
  98 0052 0123     		mov	r3, #1
  99 0054 0B70     		strb	r3, [r1]
 100 0056 D3E7     		b	.L7
 101              	.LVL6:
 102              	.L1:
 165:.\Generated_Source\PSoC4/UART_INT.c ****                         /* When Hardware Flow Control selected */
 166:.\Generated_Source\PSoC4/UART_INT.c ****                         #if (UART_FLOW_CONTROL != 0u)
 167:.\Generated_Source\PSoC4/UART_INT.c ****                             /* Disable RX interrupt mask, it is enabled when user read data from th
 168:.\Generated_Source\PSoC4/UART_INT.c ****                             UART_RXSTATUS_MASK_REG  &= (uint8)~UART_RX_STS_FIFO_NOTEMPTY;
 169:.\Generated_Source\PSoC4/UART_INT.c ****                             CyIntClearPending(UART_RX_VECT_NUM);
 170:.\Generated_Source\PSoC4/UART_INT.c ****                             break; /* Break the reading of the FIFO loop, leave the data there for 
 171:.\Generated_Source\PSoC4/UART_INT.c ****                         #endif /* (UART_FLOW_CONTROL != 0u) */
 172:.\Generated_Source\PSoC4/UART_INT.c ****                     }
 173:.\Generated_Source\PSoC4/UART_INT.c ****                 }
 174:.\Generated_Source\PSoC4/UART_INT.c ****             }
 175:.\Generated_Source\PSoC4/UART_INT.c ****         }while((readStatus & UART_RX_STS_FIFO_NOTEMPTY) != 0u);
 176:.\Generated_Source\PSoC4/UART_INT.c **** 
 177:.\Generated_Source\PSoC4/UART_INT.c ****         /* User code required at end of ISR (Optional) */
 178:.\Generated_Source\PSoC4/UART_INT.c ****         /* `#START UART_RXISR_END` */
 179:.\Generated_Source\PSoC4/UART_INT.c **** 
ARM GAS  C:\temp\ccYxUzzJ.s 			page 6


 180:.\Generated_Source\PSoC4/UART_INT.c ****         /* `#END` */
 181:.\Generated_Source\PSoC4/UART_INT.c **** 
 182:.\Generated_Source\PSoC4/UART_INT.c ****     #ifdef UART_RXISR_EXIT_CALLBACK
 183:.\Generated_Source\PSoC4/UART_INT.c ****         UART_RXISR_ExitCallback();
 184:.\Generated_Source\PSoC4/UART_INT.c ****     #endif /* UART_RXISR_EXIT_CALLBACK */
 185:.\Generated_Source\PSoC4/UART_INT.c **** 
 186:.\Generated_Source\PSoC4/UART_INT.c ****     #if(CY_PSOC3)
 187:.\Generated_Source\PSoC4/UART_INT.c ****         EA = int_en;
 188:.\Generated_Source\PSoC4/UART_INT.c ****     #endif /* (CY_PSOC3) */
 189:.\Generated_Source\PSoC4/UART_INT.c ****     }
 103              		.loc 1 189 0
 104              		@ sp needed
 105 0058 7047     		bx	lr
 106              	.L16:
 107 005a C046     		.align	2
 108              	.L15:
 109 005c 60000F40 		.word	1074724960
 110 0060 00000000 		.word	UART_errorStatus
 111 0064 40000F40 		.word	1074724928
 112 0068 00000000 		.word	UART_rxBuffer
 113 006c 00000000 		.word	UART_rxBufferWrite
 114 0070 00000000 		.word	UART_rxBufferLoopDetect
 115 0074 00000000 		.word	UART_rxBufferOverflow
 116 0078 00000000 		.word	UART_rxBufferRead
 117              		.cfi_endproc
 118              	.LFE0:
 119              		.size	UART_RXISR, .-UART_RXISR
 120              		.section	.text.UART_TXISR,"ax",%progbits
 121              		.align	1
 122              		.global	UART_TXISR
 123              		.code	16
 124              		.thumb_func
 125              		.type	UART_TXISR, %function
 126              	UART_TXISR:
 127              	.LFB1:
 190:.\Generated_Source\PSoC4/UART_INT.c ****     
 191:.\Generated_Source\PSoC4/UART_INT.c **** #endif /* (UART_RX_INTERRUPT_ENABLED && (UART_RX_ENABLED || UART_HD_ENABLED)) */
 192:.\Generated_Source\PSoC4/UART_INT.c **** 
 193:.\Generated_Source\PSoC4/UART_INT.c **** 
 194:.\Generated_Source\PSoC4/UART_INT.c **** #if (UART_TX_INTERRUPT_ENABLED && UART_TX_ENABLED)
 195:.\Generated_Source\PSoC4/UART_INT.c ****     /*******************************************************************************
 196:.\Generated_Source\PSoC4/UART_INT.c ****     * Function Name: UART_TXISR
 197:.\Generated_Source\PSoC4/UART_INT.c ****     ********************************************************************************
 198:.\Generated_Source\PSoC4/UART_INT.c ****     *
 199:.\Generated_Source\PSoC4/UART_INT.c ****     * Summary:
 200:.\Generated_Source\PSoC4/UART_INT.c ****     * Interrupt Service Routine for the TX portion of the UART
 201:.\Generated_Source\PSoC4/UART_INT.c ****     *
 202:.\Generated_Source\PSoC4/UART_INT.c ****     * Parameters:
 203:.\Generated_Source\PSoC4/UART_INT.c ****     *  None.
 204:.\Generated_Source\PSoC4/UART_INT.c ****     *
 205:.\Generated_Source\PSoC4/UART_INT.c ****     * Return:
 206:.\Generated_Source\PSoC4/UART_INT.c ****     *  None.
 207:.\Generated_Source\PSoC4/UART_INT.c ****     *
 208:.\Generated_Source\PSoC4/UART_INT.c ****     * Global Variables:
 209:.\Generated_Source\PSoC4/UART_INT.c ****     *  UART_txBuffer - RAM buffer pointer for transmit data from.
 210:.\Generated_Source\PSoC4/UART_INT.c ****     *  UART_txBufferRead - cyclic index for read and transmit data
 211:.\Generated_Source\PSoC4/UART_INT.c ****     *     from txBuffer, increments after each transmitted byte.
ARM GAS  C:\temp\ccYxUzzJ.s 			page 7


 212:.\Generated_Source\PSoC4/UART_INT.c ****     *  UART_rxBufferWrite - cyclic index for write to txBuffer,
 213:.\Generated_Source\PSoC4/UART_INT.c ****     *     checked to detect available for transmission bytes.
 214:.\Generated_Source\PSoC4/UART_INT.c ****     *
 215:.\Generated_Source\PSoC4/UART_INT.c ****     *******************************************************************************/
 216:.\Generated_Source\PSoC4/UART_INT.c ****     CY_ISR(UART_TXISR)
 217:.\Generated_Source\PSoC4/UART_INT.c ****     {
 128              		.loc 1 217 0
 129              		.cfi_startproc
 130              	.L18:
 218:.\Generated_Source\PSoC4/UART_INT.c ****     #if(CY_PSOC3)
 219:.\Generated_Source\PSoC4/UART_INT.c ****         uint8 int_en;
 220:.\Generated_Source\PSoC4/UART_INT.c ****     #endif /* (CY_PSOC3) */
 221:.\Generated_Source\PSoC4/UART_INT.c **** 
 222:.\Generated_Source\PSoC4/UART_INT.c ****     #ifdef UART_TXISR_ENTRY_CALLBACK
 223:.\Generated_Source\PSoC4/UART_INT.c ****         UART_TXISR_EntryCallback();
 224:.\Generated_Source\PSoC4/UART_INT.c ****     #endif /* UART_TXISR_ENTRY_CALLBACK */
 225:.\Generated_Source\PSoC4/UART_INT.c **** 
 226:.\Generated_Source\PSoC4/UART_INT.c ****         /* User code required at start of ISR */
 227:.\Generated_Source\PSoC4/UART_INT.c ****         /* `#START UART_TXISR_START` */
 228:.\Generated_Source\PSoC4/UART_INT.c **** 
 229:.\Generated_Source\PSoC4/UART_INT.c ****         /* `#END` */
 230:.\Generated_Source\PSoC4/UART_INT.c **** 
 231:.\Generated_Source\PSoC4/UART_INT.c ****     #if(CY_PSOC3)   /* Make sure nested interrupt is enabled */
 232:.\Generated_Source\PSoC4/UART_INT.c ****         int_en = EA;
 233:.\Generated_Source\PSoC4/UART_INT.c ****         CyGlobalIntEnable;
 234:.\Generated_Source\PSoC4/UART_INT.c ****     #endif /* (CY_PSOC3) */
 235:.\Generated_Source\PSoC4/UART_INT.c **** 
 236:.\Generated_Source\PSoC4/UART_INT.c ****         while((UART_txBufferRead != UART_txBufferWrite) &&
 131              		.loc 1 236 0
 132 0000 0D4B     		ldr	r3, .L22
 133 0002 0E49     		ldr	r1, .L22+4
 134 0004 1A78     		ldrb	r2, [r3]
 135 0006 0978     		ldrb	r1, [r1]
 136 0008 9142     		cmp	r1, r2
 137 000a 14D0     		beq	.L17
 237:.\Generated_Source\PSoC4/UART_INT.c ****              ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u))
 138              		.loc 1 237 0 discriminator 1
 139 000c 0C4A     		ldr	r2, .L22+8
 140 000e 1178     		ldrb	r1, [r2]
 141 0010 0422     		mov	r2, #4
 142 0012 0A40     		and	r2, r1
 236:.\Generated_Source\PSoC4/UART_INT.c ****              ((UART_TXSTATUS_REG & UART_TX_STS_FIFO_FULL) == 0u))
 143              		.loc 1 236 0 discriminator 1
 144 0014 0FD1     		bne	.L17
 238:.\Generated_Source\PSoC4/UART_INT.c ****         {
 239:.\Generated_Source\PSoC4/UART_INT.c ****             /* Check pointer wrap around */
 240:.\Generated_Source\PSoC4/UART_INT.c ****             if(UART_txBufferRead >= UART_TX_BUFFER_SIZE)
 145              		.loc 1 240 0
 146 0016 1978     		ldrb	r1, [r3]
 147 0018 FF29     		cmp	r1, #255
 148 001a 00D1     		bne	.L19
 241:.\Generated_Source\PSoC4/UART_INT.c ****             {
 242:.\Generated_Source\PSoC4/UART_INT.c ****                 UART_txBufferRead = 0u;
 149              		.loc 1 242 0
 150 001c 1A70     		strb	r2, [r3]
 151              	.L19:
 243:.\Generated_Source\PSoC4/UART_INT.c ****             }
ARM GAS  C:\temp\ccYxUzzJ.s 			page 8


 244:.\Generated_Source\PSoC4/UART_INT.c **** 
 245:.\Generated_Source\PSoC4/UART_INT.c ****             UART_TXDATA_REG = UART_txBuffer[UART_txBufferRead];
 152              		.loc 1 245 0
 153 001e 1A78     		ldrb	r2, [r3]
 154 0020 0849     		ldr	r1, .L22+12
 155 0022 D2B2     		uxtb	r2, r2
 156 0024 8A5C     		ldrb	r2, [r1, r2]
 157 0026 0849     		ldr	r1, .L22+16
 158 0028 D2B2     		uxtb	r2, r2
 159 002a 0A70     		strb	r2, [r1]
 246:.\Generated_Source\PSoC4/UART_INT.c **** 
 247:.\Generated_Source\PSoC4/UART_INT.c ****             /* Set next pointer */
 248:.\Generated_Source\PSoC4/UART_INT.c ****             UART_txBufferRead++;
 160              		.loc 1 248 0
 161 002c 1A78     		ldrb	r2, [r3]
 162 002e 0132     		add	r2, r2, #1
 163 0030 D2B2     		uxtb	r2, r2
 164 0032 1A70     		strb	r2, [r3]
 165 0034 E4E7     		b	.L18
 166              	.L17:
 249:.\Generated_Source\PSoC4/UART_INT.c ****         }
 250:.\Generated_Source\PSoC4/UART_INT.c **** 
 251:.\Generated_Source\PSoC4/UART_INT.c ****         /* User code required at end of ISR (Optional) */
 252:.\Generated_Source\PSoC4/UART_INT.c ****         /* `#START UART_TXISR_END` */
 253:.\Generated_Source\PSoC4/UART_INT.c **** 
 254:.\Generated_Source\PSoC4/UART_INT.c ****         /* `#END` */
 255:.\Generated_Source\PSoC4/UART_INT.c **** 
 256:.\Generated_Source\PSoC4/UART_INT.c ****     #ifdef UART_TXISR_EXIT_CALLBACK
 257:.\Generated_Source\PSoC4/UART_INT.c ****         UART_TXISR_ExitCallback();
 258:.\Generated_Source\PSoC4/UART_INT.c ****     #endif /* UART_TXISR_EXIT_CALLBACK */
 259:.\Generated_Source\PSoC4/UART_INT.c **** 
 260:.\Generated_Source\PSoC4/UART_INT.c ****     #if(CY_PSOC3)
 261:.\Generated_Source\PSoC4/UART_INT.c ****         EA = int_en;
 262:.\Generated_Source\PSoC4/UART_INT.c ****     #endif /* (CY_PSOC3) */
 263:.\Generated_Source\PSoC4/UART_INT.c ****    }
 167              		.loc 1 263 0
 168              		@ sp needed
 169 0036 7047     		bx	lr
 170              	.L23:
 171              		.align	2
 172              	.L22:
 173 0038 00000000 		.word	UART_txBufferRead
 174 003c 00000000 		.word	UART_txBufferWrite
 175 0040 61000F40 		.word	1074724961
 176 0044 00000000 		.word	UART_txBuffer
 177 0048 41000F40 		.word	1074724929
 178              		.cfi_endproc
 179              	.LFE1:
 180              		.size	UART_TXISR, .-UART_TXISR
 181              		.text
 182              	.Letext0:
 183              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 184              		.file 3 ".\\Generated_Source\\PSoC4\\UART.h"
 185              		.section	.debug_info,"",%progbits
 186              	.Ldebug_info0:
 187 0000 7A010000 		.4byte	0x17a
 188 0004 0400     		.2byte	0x4
ARM GAS  C:\temp\ccYxUzzJ.s 			page 9


 189 0006 00000000 		.4byte	.Ldebug_abbrev0
 190 000a 04       		.byte	0x4
 191 000b 01       		.uleb128 0x1
 192 000c 00000000 		.4byte	.LASF27
 193 0010 01       		.byte	0x1
 194 0011 A6000000 		.4byte	.LASF28
 195 0015 34020000 		.4byte	.LASF29
 196 0019 00000000 		.4byte	.Ldebug_ranges0+0
 197 001d 00000000 		.4byte	0
 198 0021 00000000 		.4byte	.Ldebug_line0
 199 0025 02       		.uleb128 0x2
 200 0026 01       		.byte	0x1
 201 0027 06       		.byte	0x6
 202 0028 28020000 		.4byte	.LASF0
 203 002c 02       		.uleb128 0x2
 204 002d 01       		.byte	0x1
 205 002e 08       		.byte	0x8
 206 002f 01010000 		.4byte	.LASF1
 207 0033 02       		.uleb128 0x2
 208 0034 02       		.byte	0x2
 209 0035 05       		.byte	0x5
 210 0036 EB010000 		.4byte	.LASF2
 211 003a 02       		.uleb128 0x2
 212 003b 02       		.byte	0x2
 213 003c 07       		.byte	0x7
 214 003d D8000000 		.4byte	.LASF3
 215 0041 02       		.uleb128 0x2
 216 0042 04       		.byte	0x4
 217 0043 05       		.byte	0x5
 218 0044 08020000 		.4byte	.LASF4
 219 0048 02       		.uleb128 0x2
 220 0049 04       		.byte	0x4
 221 004a 07       		.byte	0x7
 222 004b 14010000 		.4byte	.LASF5
 223 004f 02       		.uleb128 0x2
 224 0050 08       		.byte	0x8
 225 0051 05       		.byte	0x5
 226 0052 A8010000 		.4byte	.LASF6
 227 0056 02       		.uleb128 0x2
 228 0057 08       		.byte	0x8
 229 0058 07       		.byte	0x7
 230 0059 72010000 		.4byte	.LASF7
 231 005d 03       		.uleb128 0x3
 232 005e 04       		.byte	0x4
 233 005f 05       		.byte	0x5
 234 0060 696E7400 		.ascii	"int\000"
 235 0064 02       		.uleb128 0x2
 236 0065 04       		.byte	0x4
 237 0066 07       		.byte	0x7
 238 0067 65010000 		.4byte	.LASF8
 239 006b 04       		.uleb128 0x4
 240 006c 26010000 		.4byte	.LASF12
 241 0070 02       		.byte	0x2
 242 0071 C2       		.byte	0xc2
 243 0072 2C000000 		.4byte	0x2c
 244 0076 02       		.uleb128 0x2
 245 0077 04       		.byte	0x4
ARM GAS  C:\temp\ccYxUzzJ.s 			page 10


 246 0078 04       		.byte	0x4
 247 0079 A0000000 		.4byte	.LASF9
 248 007d 02       		.uleb128 0x2
 249 007e 08       		.byte	0x8
 250 007f 04       		.byte	0x4
 251 0080 3A010000 		.4byte	.LASF10
 252 0084 02       		.uleb128 0x2
 253 0085 01       		.byte	0x1
 254 0086 08       		.byte	0x8
 255 0087 11020000 		.4byte	.LASF11
 256 008b 05       		.uleb128 0x5
 257 008c 0F010000 		.4byte	.LASF13
 258 0090 02       		.byte	0x2
 259 0091 6C01     		.2byte	0x16c
 260 0093 97000000 		.4byte	0x97
 261 0097 06       		.uleb128 0x6
 262 0098 6B000000 		.4byte	0x6b
 263 009c 02       		.uleb128 0x2
 264 009d 04       		.byte	0x4
 265 009e 07       		.byte	0x7
 266 009f 9F010000 		.4byte	.LASF14
 267 00a3 07       		.uleb128 0x7
 268 00a4 EB000000 		.4byte	.LASF30
 269 00a8 01       		.byte	0x1
 270 00a9 3B       		.byte	0x3b
 271 00aa 00000000 		.4byte	.LFB0
 272 00ae 7C000000 		.4byte	.LFE0-.LFB0
 273 00b2 01       		.uleb128 0x1
 274 00b3 9C       		.byte	0x9c
 275 00b4 E6000000 		.4byte	0xe6
 276 00b8 08       		.uleb128 0x8
 277 00b9 7A020000 		.4byte	.LASF15
 278 00bd 01       		.byte	0x1
 279 00be 3D       		.byte	0x3d
 280 00bf 6B000000 		.4byte	0x6b
 281 00c3 00000000 		.4byte	.LLST0
 282 00c7 08       		.uleb128 0x8
 283 00c8 F6000000 		.4byte	.LASF16
 284 00cc 01       		.byte	0x1
 285 00cd 3E       		.byte	0x3e
 286 00ce 6B000000 		.4byte	0x6b
 287 00d2 2D000000 		.4byte	.LLST1
 288 00d6 08       		.uleb128 0x8
 289 00d7 C1010000 		.4byte	.LASF17
 290 00db 01       		.byte	0x1
 291 00dc 3F       		.byte	0x3f
 292 00dd 6B000000 		.4byte	0x6b
 293 00e1 40000000 		.4byte	.LLST2
 294 00e5 00       		.byte	0
 295 00e6 09       		.uleb128 0x9
 296 00e7 B6010000 		.4byte	.LASF31
 297 00eb 01       		.byte	0x1
 298 00ec D8       		.byte	0xd8
 299 00ed 00000000 		.4byte	.LFB1
 300 00f1 4C000000 		.4byte	.LFE1-.LFB1
 301 00f5 01       		.uleb128 0x1
 302 00f6 9C       		.byte	0x9c
ARM GAS  C:\temp\ccYxUzzJ.s 			page 11


 303 00f7 0A       		.uleb128 0xa
 304 00f8 6B000000 		.4byte	0x6b
 305 00fc 07010000 		.4byte	0x107
 306 0100 0B       		.uleb128 0xb
 307 0101 9C000000 		.4byte	0x9c
 308 0105 FE       		.byte	0xfe
 309 0106 00       		.byte	0
 310 0107 0C       		.uleb128 0xc
 311 0108 CA000000 		.4byte	.LASF18
 312 010c 03       		.byte	0x3
 313 010d 3801     		.2byte	0x138
 314 010f 13010000 		.4byte	0x113
 315 0113 06       		.uleb128 0x6
 316 0114 F7000000 		.4byte	0xf7
 317 0118 0C       		.uleb128 0xc
 318 0119 16020000 		.4byte	.LASF19
 319 011d 03       		.byte	0x3
 320 011e 3901     		.2byte	0x139
 321 0120 97000000 		.4byte	0x97
 322 0124 0C       		.uleb128 0xc
 323 0125 F5010000 		.4byte	.LASF20
 324 0129 03       		.byte	0x3
 325 012a 3A01     		.2byte	0x13a
 326 012c 6B000000 		.4byte	0x6b
 327 0130 0C       		.uleb128 0xc
 328 0131 41010000 		.4byte	.LASF21
 329 0135 03       		.byte	0x3
 330 0136 3D01     		.2byte	0x13d
 331 0138 6B000000 		.4byte	0x6b
 332 013c 0C       		.uleb128 0xc
 333 013d 2C010000 		.4byte	.LASF22
 334 0141 03       		.byte	0x3
 335 0142 3E01     		.2byte	0x13e
 336 0144 48010000 		.4byte	0x148
 337 0148 06       		.uleb128 0x6
 338 0149 F7000000 		.4byte	0xf7
 339 014d 0C       		.uleb128 0xc
 340 014e 8E000000 		.4byte	.LASF23
 341 0152 03       		.byte	0x3
 342 0153 3F01     		.2byte	0x13f
 343 0155 97000000 		.4byte	0x97
 344 0159 0C       		.uleb128 0xc
 345 015a 52010000 		.4byte	.LASF24
 346 015e 03       		.byte	0x3
 347 015f 4001     		.2byte	0x140
 348 0161 97000000 		.4byte	0x97
 349 0165 0C       		.uleb128 0xc
 350 0166 D3010000 		.4byte	.LASF25
 351 016a 03       		.byte	0x3
 352 016b 4101     		.2byte	0x141
 353 016d 97000000 		.4byte	0x97
 354 0171 0C       		.uleb128 0xc
 355 0172 89010000 		.4byte	.LASF26
 356 0176 03       		.byte	0x3
 357 0177 4201     		.2byte	0x142
 358 0179 97000000 		.4byte	0x97
 359 017d 00       		.byte	0
ARM GAS  C:\temp\ccYxUzzJ.s 			page 12


 360              		.section	.debug_abbrev,"",%progbits
 361              	.Ldebug_abbrev0:
 362 0000 01       		.uleb128 0x1
 363 0001 11       		.uleb128 0x11
 364 0002 01       		.byte	0x1
 365 0003 25       		.uleb128 0x25
 366 0004 0E       		.uleb128 0xe
 367 0005 13       		.uleb128 0x13
 368 0006 0B       		.uleb128 0xb
 369 0007 03       		.uleb128 0x3
 370 0008 0E       		.uleb128 0xe
 371 0009 1B       		.uleb128 0x1b
 372 000a 0E       		.uleb128 0xe
 373 000b 55       		.uleb128 0x55
 374 000c 17       		.uleb128 0x17
 375 000d 11       		.uleb128 0x11
 376 000e 01       		.uleb128 0x1
 377 000f 10       		.uleb128 0x10
 378 0010 17       		.uleb128 0x17
 379 0011 00       		.byte	0
 380 0012 00       		.byte	0
 381 0013 02       		.uleb128 0x2
 382 0014 24       		.uleb128 0x24
 383 0015 00       		.byte	0
 384 0016 0B       		.uleb128 0xb
 385 0017 0B       		.uleb128 0xb
 386 0018 3E       		.uleb128 0x3e
 387 0019 0B       		.uleb128 0xb
 388 001a 03       		.uleb128 0x3
 389 001b 0E       		.uleb128 0xe
 390 001c 00       		.byte	0
 391 001d 00       		.byte	0
 392 001e 03       		.uleb128 0x3
 393 001f 24       		.uleb128 0x24
 394 0020 00       		.byte	0
 395 0021 0B       		.uleb128 0xb
 396 0022 0B       		.uleb128 0xb
 397 0023 3E       		.uleb128 0x3e
 398 0024 0B       		.uleb128 0xb
 399 0025 03       		.uleb128 0x3
 400 0026 08       		.uleb128 0x8
 401 0027 00       		.byte	0
 402 0028 00       		.byte	0
 403 0029 04       		.uleb128 0x4
 404 002a 16       		.uleb128 0x16
 405 002b 00       		.byte	0
 406 002c 03       		.uleb128 0x3
 407 002d 0E       		.uleb128 0xe
 408 002e 3A       		.uleb128 0x3a
 409 002f 0B       		.uleb128 0xb
 410 0030 3B       		.uleb128 0x3b
 411 0031 0B       		.uleb128 0xb
 412 0032 49       		.uleb128 0x49
 413 0033 13       		.uleb128 0x13
 414 0034 00       		.byte	0
 415 0035 00       		.byte	0
 416 0036 05       		.uleb128 0x5
ARM GAS  C:\temp\ccYxUzzJ.s 			page 13


 417 0037 16       		.uleb128 0x16
 418 0038 00       		.byte	0
 419 0039 03       		.uleb128 0x3
 420 003a 0E       		.uleb128 0xe
 421 003b 3A       		.uleb128 0x3a
 422 003c 0B       		.uleb128 0xb
 423 003d 3B       		.uleb128 0x3b
 424 003e 05       		.uleb128 0x5
 425 003f 49       		.uleb128 0x49
 426 0040 13       		.uleb128 0x13
 427 0041 00       		.byte	0
 428 0042 00       		.byte	0
 429 0043 06       		.uleb128 0x6
 430 0044 35       		.uleb128 0x35
 431 0045 00       		.byte	0
 432 0046 49       		.uleb128 0x49
 433 0047 13       		.uleb128 0x13
 434 0048 00       		.byte	0
 435 0049 00       		.byte	0
 436 004a 07       		.uleb128 0x7
 437 004b 2E       		.uleb128 0x2e
 438 004c 01       		.byte	0x1
 439 004d 3F       		.uleb128 0x3f
 440 004e 19       		.uleb128 0x19
 441 004f 03       		.uleb128 0x3
 442 0050 0E       		.uleb128 0xe
 443 0051 3A       		.uleb128 0x3a
 444 0052 0B       		.uleb128 0xb
 445 0053 3B       		.uleb128 0x3b
 446 0054 0B       		.uleb128 0xb
 447 0055 27       		.uleb128 0x27
 448 0056 19       		.uleb128 0x19
 449 0057 11       		.uleb128 0x11
 450 0058 01       		.uleb128 0x1
 451 0059 12       		.uleb128 0x12
 452 005a 06       		.uleb128 0x6
 453 005b 40       		.uleb128 0x40
 454 005c 18       		.uleb128 0x18
 455 005d 9742     		.uleb128 0x2117
 456 005f 19       		.uleb128 0x19
 457 0060 01       		.uleb128 0x1
 458 0061 13       		.uleb128 0x13
 459 0062 00       		.byte	0
 460 0063 00       		.byte	0
 461 0064 08       		.uleb128 0x8
 462 0065 34       		.uleb128 0x34
 463 0066 00       		.byte	0
 464 0067 03       		.uleb128 0x3
 465 0068 0E       		.uleb128 0xe
 466 0069 3A       		.uleb128 0x3a
 467 006a 0B       		.uleb128 0xb
 468 006b 3B       		.uleb128 0x3b
 469 006c 0B       		.uleb128 0xb
 470 006d 49       		.uleb128 0x49
 471 006e 13       		.uleb128 0x13
 472 006f 02       		.uleb128 0x2
 473 0070 17       		.uleb128 0x17
ARM GAS  C:\temp\ccYxUzzJ.s 			page 14


 474 0071 00       		.byte	0
 475 0072 00       		.byte	0
 476 0073 09       		.uleb128 0x9
 477 0074 2E       		.uleb128 0x2e
 478 0075 00       		.byte	0
 479 0076 3F       		.uleb128 0x3f
 480 0077 19       		.uleb128 0x19
 481 0078 03       		.uleb128 0x3
 482 0079 0E       		.uleb128 0xe
 483 007a 3A       		.uleb128 0x3a
 484 007b 0B       		.uleb128 0xb
 485 007c 3B       		.uleb128 0x3b
 486 007d 0B       		.uleb128 0xb
 487 007e 27       		.uleb128 0x27
 488 007f 19       		.uleb128 0x19
 489 0080 11       		.uleb128 0x11
 490 0081 01       		.uleb128 0x1
 491 0082 12       		.uleb128 0x12
 492 0083 06       		.uleb128 0x6
 493 0084 40       		.uleb128 0x40
 494 0085 18       		.uleb128 0x18
 495 0086 9742     		.uleb128 0x2117
 496 0088 19       		.uleb128 0x19
 497 0089 00       		.byte	0
 498 008a 00       		.byte	0
 499 008b 0A       		.uleb128 0xa
 500 008c 01       		.uleb128 0x1
 501 008d 01       		.byte	0x1
 502 008e 49       		.uleb128 0x49
 503 008f 13       		.uleb128 0x13
 504 0090 01       		.uleb128 0x1
 505 0091 13       		.uleb128 0x13
 506 0092 00       		.byte	0
 507 0093 00       		.byte	0
 508 0094 0B       		.uleb128 0xb
 509 0095 21       		.uleb128 0x21
 510 0096 00       		.byte	0
 511 0097 49       		.uleb128 0x49
 512 0098 13       		.uleb128 0x13
 513 0099 2F       		.uleb128 0x2f
 514 009a 0B       		.uleb128 0xb
 515 009b 00       		.byte	0
 516 009c 00       		.byte	0
 517 009d 0C       		.uleb128 0xc
 518 009e 34       		.uleb128 0x34
 519 009f 00       		.byte	0
 520 00a0 03       		.uleb128 0x3
 521 00a1 0E       		.uleb128 0xe
 522 00a2 3A       		.uleb128 0x3a
 523 00a3 0B       		.uleb128 0xb
 524 00a4 3B       		.uleb128 0x3b
 525 00a5 05       		.uleb128 0x5
 526 00a6 49       		.uleb128 0x49
 527 00a7 13       		.uleb128 0x13
 528 00a8 3F       		.uleb128 0x3f
 529 00a9 19       		.uleb128 0x19
 530 00aa 3C       		.uleb128 0x3c
ARM GAS  C:\temp\ccYxUzzJ.s 			page 15


 531 00ab 19       		.uleb128 0x19
 532 00ac 00       		.byte	0
 533 00ad 00       		.byte	0
 534 00ae 00       		.byte	0
 535              		.section	.debug_loc,"",%progbits
 536              	.Ldebug_loc0:
 537              	.LLST0:
 538 0000 08000000 		.4byte	.LVL0
 539 0004 18000000 		.4byte	.LVL1
 540 0008 0100     		.2byte	0x1
 541 000a 53       		.byte	0x53
 542 000b 22000000 		.4byte	.LVL2
 543 000f 2A000000 		.4byte	.LVL4
 544 0013 0100     		.2byte	0x1
 545 0015 51       		.byte	0x51
 546 0016 2A000000 		.4byte	.LVL4
 547 001a 2C000000 		.4byte	.LVL5
 548 001e 0500     		.2byte	0x5
 549 0020 70       		.byte	0x70
 550 0021 00       		.sleb128 0
 551 0022 72       		.byte	0x72
 552 0023 00       		.sleb128 0
 553 0024 22       		.byte	0x22
 554 0025 00000000 		.4byte	0
 555 0029 00000000 		.4byte	0
 556              	.LLST1:
 557 002d 08000000 		.4byte	.LVL0
 558 0031 18000000 		.4byte	.LVL1
 559 0035 0100     		.2byte	0x1
 560 0037 53       		.byte	0x53
 561 0038 00000000 		.4byte	0
 562 003c 00000000 		.4byte	0
 563              	.LLST2:
 564 0040 28000000 		.4byte	.LVL3
 565 0044 58000000 		.4byte	.LVL6
 566 0048 0200     		.2byte	0x2
 567 004a 31       		.byte	0x31
 568 004b 9F       		.byte	0x9f
 569 004c 00000000 		.4byte	0
 570 0050 00000000 		.4byte	0
 571              		.section	.debug_aranges,"",%progbits
 572 0000 24000000 		.4byte	0x24
 573 0004 0200     		.2byte	0x2
 574 0006 00000000 		.4byte	.Ldebug_info0
 575 000a 04       		.byte	0x4
 576 000b 00       		.byte	0
 577 000c 0000     		.2byte	0
 578 000e 0000     		.2byte	0
 579 0010 00000000 		.4byte	.LFB0
 580 0014 7C000000 		.4byte	.LFE0-.LFB0
 581 0018 00000000 		.4byte	.LFB1
 582 001c 4C000000 		.4byte	.LFE1-.LFB1
 583 0020 00000000 		.4byte	0
 584 0024 00000000 		.4byte	0
 585              		.section	.debug_ranges,"",%progbits
 586              	.Ldebug_ranges0:
 587 0000 00000000 		.4byte	.LFB0
ARM GAS  C:\temp\ccYxUzzJ.s 			page 16


 588 0004 7C000000 		.4byte	.LFE0
 589 0008 00000000 		.4byte	.LFB1
 590 000c 4C000000 		.4byte	.LFE1
 591 0010 00000000 		.4byte	0
 592 0014 00000000 		.4byte	0
 593              		.section	.debug_line,"",%progbits
 594              	.Ldebug_line0:
 595 0000 B2000000 		.section	.debug_str,"MS",%progbits,1
 595      02005100 
 595      00000201 
 595      FB0E0D00 
 595      01010101 
 596              	.LASF27:
 597 0000 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 597      4320342E 
 597      392E3320 
 597      32303135 
 597      30333033 
 598 0033 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 598      20726576 
 598      6973696F 
 598      6E203232 
 598      31323230 
 599 0066 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 599      66756E63 
 599      74696F6E 
 599      2D736563 
 599      74696F6E 
 600              	.LASF23:
 601 008e 55415254 		.ascii	"UART_rxBufferRead\000"
 601      5F727842 
 601      75666665 
 601      72526561 
 601      6400
 602              	.LASF9:
 603 00a0 666C6F61 		.ascii	"float\000"
 603      7400
 604              	.LASF28:
 605 00a6 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\UART_INT.c\000"
 605      6E657261 
 605      7465645F 
 605      536F7572 
 605      63655C50 
 606              	.LASF18:
 607 00ca 55415254 		.ascii	"UART_txBuffer\000"
 607      5F747842 
 607      75666665 
 607      7200
 608              	.LASF3:
 609 00d8 73686F72 		.ascii	"short unsigned int\000"
 609      7420756E 
 609      7369676E 
 609      65642069 
 609      6E7400
 610              	.LASF30:
 611 00eb 55415254 		.ascii	"UART_RXISR\000"
 611      5F525849 
ARM GAS  C:\temp\ccYxUzzJ.s 			page 17


 611      535200
 612              	.LASF16:
 613 00f6 72656164 		.ascii	"readStatus\000"
 613      53746174 
 613      757300
 614              	.LASF1:
 615 0101 756E7369 		.ascii	"unsigned char\000"
 615      676E6564 
 615      20636861 
 615      7200
 616              	.LASF13:
 617 010f 72656738 		.ascii	"reg8\000"
 617      00
 618              	.LASF5:
 619 0114 6C6F6E67 		.ascii	"long unsigned int\000"
 619      20756E73 
 619      69676E65 
 619      6420696E 
 619      7400
 620              	.LASF12:
 621 0126 75696E74 		.ascii	"uint8\000"
 621      3800
 622              	.LASF22:
 623 012c 55415254 		.ascii	"UART_rxBuffer\000"
 623      5F727842 
 623      75666665 
 623      7200
 624              	.LASF10:
 625 013a 646F7562 		.ascii	"double\000"
 625      6C6500
 626              	.LASF21:
 627 0141 55415254 		.ascii	"UART_errorStatus\000"
 627      5F657272 
 627      6F725374 
 627      61747573 
 627      00
 628              	.LASF24:
 629 0152 55415254 		.ascii	"UART_rxBufferWrite\000"
 629      5F727842 
 629      75666665 
 629      72577269 
 629      746500
 630              	.LASF8:
 631 0165 756E7369 		.ascii	"unsigned int\000"
 631      676E6564 
 631      20696E74 
 631      00
 632              	.LASF7:
 633 0172 6C6F6E67 		.ascii	"long long unsigned int\000"
 633      206C6F6E 
 633      6720756E 
 633      7369676E 
 633      65642069 
 634              	.LASF26:
 635 0189 55415254 		.ascii	"UART_rxBufferOverflow\000"
 635      5F727842 
 635      75666665 
ARM GAS  C:\temp\ccYxUzzJ.s 			page 18


 635      724F7665 
 635      72666C6F 
 636              	.LASF14:
 637 019f 73697A65 		.ascii	"sizetype\000"
 637      74797065 
 637      00
 638              	.LASF6:
 639 01a8 6C6F6E67 		.ascii	"long long int\000"
 639      206C6F6E 
 639      6720696E 
 639      7400
 640              	.LASF31:
 641 01b6 55415254 		.ascii	"UART_TXISR\000"
 641      5F545849 
 641      535200
 642              	.LASF17:
 643 01c1 696E6372 		.ascii	"increment_pointer\000"
 643      656D656E 
 643      745F706F 
 643      696E7465 
 643      7200
 644              	.LASF25:
 645 01d3 55415254 		.ascii	"UART_rxBufferLoopDetect\000"
 645      5F727842 
 645      75666665 
 645      724C6F6F 
 645      70446574 
 646              	.LASF2:
 647 01eb 73686F72 		.ascii	"short int\000"
 647      7420696E 
 647      7400
 648              	.LASF20:
 649 01f5 55415254 		.ascii	"UART_txBufferWrite\000"
 649      5F747842 
 649      75666665 
 649      72577269 
 649      746500
 650              	.LASF4:
 651 0208 6C6F6E67 		.ascii	"long int\000"
 651      20696E74 
 651      00
 652              	.LASF11:
 653 0211 63686172 		.ascii	"char\000"
 653      00
 654              	.LASF19:
 655 0216 55415254 		.ascii	"UART_txBufferRead\000"
 655      5F747842 
 655      75666665 
 655      72526561 
 655      6400
 656              	.LASF0:
 657 0228 7369676E 		.ascii	"signed char\000"
 657      65642063 
 657      68617200 
 658              	.LASF29:
 659 0234 433A5C55 		.ascii	"C:\\Users\\BEAST\\Desktop\\GITHUB PSOC PLANTE\\PSoC"
 659      73657273 
ARM GAS  C:\temp\ccYxUzzJ.s 			page 19


 659      5C424541 
 659      53545C44 
 659      65736B74 
 660 0262 5C506C61 		.ascii	"\\Plant_control2_0.cydsn\000"
 660      6E745F63 
 660      6F6E7472 
 660      6F6C325F 
 660      302E6379 
 661              	.LASF15:
 662 027a 72656164 		.ascii	"readData\000"
 662      44617461 
 662      00
 663              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
