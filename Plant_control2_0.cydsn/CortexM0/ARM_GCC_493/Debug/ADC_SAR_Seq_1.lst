ARM GAS  C:\temp\ccklmfMt.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_Seq_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_idiv
  18              		.section	.text.ADC_SAR_Seq_1_Init,"ax",%progbits
  19              		.align	2
  20              		.global	ADC_SAR_Seq_1_Init
  21              		.code	16
  22              		.thumb_func
  23              		.type	ADC_SAR_Seq_1_Init, %function
  24              	ADC_SAR_Seq_1_Init:
  25              	.LFB1:
  26              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * File Name: ADC_SAR_Seq_1.c
   3:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #include "ADC_SAR_Seq_1.h"
  19:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  20:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint8 ADC_SAR_Seq_1_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int16 ADC_SAR_Seq_1_offset[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int32 ADC_SAR_Seq_1_countsPer10Volt[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];   /* Gain compensat
  27:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  28:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
ARM GAS  C:\temp\ccklmfMt.s 			page 2


  32:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** static const uint32 CYCODE ADC_SAR_Seq_1_channelsConfig[] = { 0x00000000u, 0x00000000u, 0x00000100u
  34:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****  0x00000000u };
  35:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  37:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  38:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Start
  39:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  40:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  41:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  42:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Performs all required initialization for this component
  43:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and enables the power. The power will be set to the appropriate
  44:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  power based on the clock frequency.
  45:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  46:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  47:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  48:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  49:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  50:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  51:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  52:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  53:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_initVar variable is used to indicate when/if initial
  54:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  configuration of this component has happened. The variable is initialized to
  55:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  56:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  57:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  58:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If re-initialization of the component is required the variable should be set
  59:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  to zero before call of ADC_SAR_Seq_1_Start() routine, or the user may call
  60:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Init() and ADC_SAR_Seq_1_Enable() as done in the
  61:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  62:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  63:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  64:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Start(void)
  65:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  66:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
  67:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(ADC_SAR_Seq_1_initVar == 0u)
  68:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
  69:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_Init();
  70:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
  71:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
  72:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_Enable();
  73:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
  74:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  76:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  77:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Init
  78:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  79:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  80:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  81:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Initialize component's parameters to the parameters set by user in the
  82:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  customizer of the component placed onto schematic. Usually called in
  83:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start().
  84:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  85:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  86:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  87:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  88:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
ARM GAS  C:\temp\ccklmfMt.s 			page 3


  89:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  90:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  91:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  92:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_offset variable is initialized.
  93:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  94:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  95:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Init(void)
  96:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  27              		.loc 1 96 0
  28              		.cfi_startproc
  29 0000 10B5     		push	{r4, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 4, -8
  32              		.cfi_offset 14, -4
  97:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 chNum;
  98:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 tmpRegVal;
  99:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 counts;
 100:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 101:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 102:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         static const uint8 CYCODE ADC_SAR_Seq_1_InputsPlacement[] =
 103:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 104:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 105:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PIN
 106:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 107:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PIN
 108:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u)
 109:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 110:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PIN
 111:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u */
 112:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u)
 113:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 114:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PIN
 115:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u */
 116:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u)
 117:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 118:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PIN
 119:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u */
 120:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u)
 121:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 122:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PIN
 123:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u */
 124:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u)
 125:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 126:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PIN
 127:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u */
 128:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u)
 129:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 130:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PIN
 131:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u */
 132:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u)
 133:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 134:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PIN
 135:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u */
 136:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u)
 137:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 138:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PIN
 139:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u */
ARM GAS  C:\temp\ccklmfMt.s 			page 4


 140:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u)
 141:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 142:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PIN
 143:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u */
 144:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u)
 145:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 146:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PIN
 147:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u */
 148:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u)
 149:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 150:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PIN
 151:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u */
 152:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u)
 153:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 154:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PIN
 155:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u */
 156:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u)
 157:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 158:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PIN
 159:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u */
 160:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u)
 161:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 162:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PIN
 163:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u */
 164:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u)
 165:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 166:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PIN
 167:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u */
 168:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         };
 169:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 170:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 171:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_IRQ_REMOVE == 0u)
 172:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Start and set interrupt vector */
 173:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyIntSetPriority(ADC_SAR_Seq_1_INTC_NUMBER, ADC_SAR_Seq_1_INTC_PRIOR_NUMBER);
  33              		.loc 1 173 0
  34 0002 0E20     		mov	r0, #14
  35 0004 0321     		mov	r1, #3
  36 0006 FFF7FEFF 		bl	CyIntSetPriority
  37              	.LVL0:
 174:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (void)CyIntSetVector(ADC_SAR_Seq_1_INTC_NUMBER, &ADC_SAR_Seq_1_ISR);
  38              		.loc 1 174 0
  39 000a 0E20     		mov	r0, #14
  40 000c 3F49     		ldr	r1, .L12
  41 000e FFF7FEFF 		bl	CyIntSetVector
  42              	.LVL1:
 175:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif   /* End ADC_SAR_Seq_1_IRQ_REMOVE */
 176:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 177:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Init SAR and MUX registers */
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = ADC_SAR_Seq_1_DEFAULT_EN_CHANNELS;
  43              		.loc 1 178 0
  44 0012 1F22     		mov	r2, #31
  45 0014 3E4B     		ldr	r3, .L12+4
  46 0016 1A60     		str	r2, [r3]
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 180:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Enable the SAR internal pump when global pump is enabled */
 181:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (((ADC_SAR_Seq_1_PUMP_CTRL_REG & ADC_SAR_Seq_1_PUMP_CTRL_ENABLED) != 0u) ? 
  47              		.loc 1 181 0
ARM GAS  C:\temp\ccklmfMt.s 			page 5


  48 0018 3E4B     		ldr	r3, .L12+8
  49 001a 1B68     		ldr	r3, [r3]
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
  50              		.loc 1 179 0
  51 001c 002B     		cmp	r3, #0
  52 001e 01DA     		bge	.L10
  53 0020 3D49     		ldr	r1, .L12+12
  54 0022 00E0     		b	.L2
  55              	.L10:
  56 0024 3D49     		ldr	r1, .L12+16
  57              	.L2:
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
  58              		.loc 1 179 0 is_stmt 0 discriminator 4
  59 0026 3E4A     		ldr	r2, .L12+20
  60 0028 1368     		ldr	r3, [r2]
  61 002a 0B43     		orr	r3, r1
  62 002c 1360     		str	r3, [r2]
 182:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_BOOSTPUMP_EN : 0u);
 183:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
  63              		.loc 1 183 0 is_stmt 1 discriminator 4
  64 002e 3D4A     		ldr	r2, .L12+24
  65 0030 3D4B     		ldr	r3, .L12+28
  66 0032 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG = ADC_SAR_Seq_1_DEFAULT_RANGE_THRES_REG_CFG;
  67              		.loc 1 184 0 discriminator 4
  68 0034 3D4A     		ldr	r2, .L12+32
  69 0036 3E4B     		ldr	r3, .L12+36
  70 0038 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_COND_REG  = ADC_SAR_Seq_1_COMPARE_MODE;
  71              		.loc 1 185 0 discriminator 4
  72 003a 0023     		mov	r3, #0
  73 003c 3D4A     		ldr	r2, .L12+40
  74 003e 1360     		str	r3, [r2]
 186:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME01_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
  75              		.loc 1 186 0 discriminator 4
  76 0040 3D4A     		ldr	r2, .L12+44
  77 0042 3E49     		ldr	r1, .L12+48
  78 0044 0A60     		str	r2, [r1]
 187:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME23_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
  79              		.loc 1 187 0 discriminator 4
  80 0046 3E49     		ldr	r1, .L12+52
  81 0048 0A60     		str	r2, [r1]
 188:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 189:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 190:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0 != 0u)
 191:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_MUX_SWITCH0_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 192:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 193:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 194:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 195:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 196:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /*ADC_SAR_Seq_1_CHANNELS_MODE !=0 */
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 198:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = 0u;
  82              		.loc 1 198 0 discriminator 4
  83 004a 3E4A     		ldr	r2, .L12+56
  84 004c 1360     		str	r3, [r2]
 199:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = 0u;
ARM GAS  C:\temp\ccklmfMt.s 			page 6


  85              		.loc 1 199 0 discriminator 4
  86 004e 3E4A     		ldr	r2, .L12+60
  87 0050 1360     		str	r3, [r2]
 200:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_INTR_MASK_REG = ADC_SAR_Seq_1_SAR_INTR_MASK;
  88              		.loc 1 200 0 discriminator 4
  89 0052 0122     		mov	r2, #1
  90 0054 3D4B     		ldr	r3, .L12+64
  91 0056 1A60     		str	r2, [r3]
 201:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 202:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 203:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_ANA_TRIM_REG = ADC_SAR_Seq_1_TRIM_COEF;
  92              		.loc 1 203 0 discriminator 4
  93 0058 0132     		add	r2, r2, #1
  94 005a 3D4B     		ldr	r3, .L12+68
  95 005c 1A60     		str	r2, [r3]
 204:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 205:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 206:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Read and modify default configuration based on characterization */
 207:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal = ADC_SAR_Seq_1_SAR_DFT_CTRL_REG;
  96              		.loc 1 207 0 discriminator 4
  97 005e 3D4A     		ldr	r2, .L12+72
  98 0060 1168     		ldr	r1, [r2]
  99              	.LVL2:
 208:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DCEN;
 100              		.loc 1 208 0 discriminator 4
 101 0062 3D4B     		ldr	r3, .L12+76
 102 0064 0B40     		and	r3, r1
 103              	.LVL3:
 209:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 210:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 211:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_NOMINAL_CLOCK_FREQ > (ADC_SAR_Seq_1_MAX_FREQUENCY / 2))
 212:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_SEL_CSEL_DFT_CHAR;
 104              		.loc 1 212 0 discriminator 4
 105 0066 C021     		mov	r1, #192
 106 0068 8904     		lsl	r1, r1, #18
 107 006a 0B43     		orr	r3, r1
 108              	.LVL4:
 213:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else  /* clock speed < 9 Mhz */
 214:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 215:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* clock speed > 9 Mhz */
 216:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else
 217:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 218:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF))
 219:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 220:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 221:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DCEN;
 222:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DLY_INC;
 223:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 224:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF)) */
 225:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 226:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 227:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_DFT_CTRL_REG = tmpRegVal;
 109              		.loc 1 227 0 discriminator 4
 110 006c 1360     		str	r3, [r2]
 111              	.LVL5:
 228:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 229:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12)
ARM GAS  C:\temp\ccklmfMt.s 			page 7


 230:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_WOUNDING_REG = ADC_SAR_Seq_1_ALT_WOUNDING;
 231:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 112              		.loc 1 233 0 discriminator 4
 113 006e 0024     		mov	r4, #0
 114 0070 49E0     		b	.L3
 115              	.LVL6:
 116              	.L9:
 234:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 235:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         tmpRegVal = (ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_CHANNEL_CONFIG_MASK);
 117              		.loc 1 235 0
 118 0072 3A49     		ldr	r1, .L12+80
 119 0074 A200     		lsl	r2, r4, #2
 120 0076 5058     		ldr	r0, [r2, r1]
 121 0078 DC23     		mov	r3, #220
 122 007a 9B01     		lsl	r3, r3, #6
 123 007c 0340     		and	r3, r0
 124              	.LVL7:
 236:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 237:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_InputsPlacement[chNum];
 125              		.loc 1 237 0
 126 007e 0919     		add	r1, r1, r4
 127 0080 097D     		ldrb	r1, [r1, #20]
 128 0082 0B43     		orr	r3, r1
 129              	.LVL8:
 238:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 239:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 240:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 241:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 242:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 243:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  (0) and 8-bit (1) resolution.
 244:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         */
 245:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if((ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12) && \
 246:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (ADC_SAR_Seq_1_ALT_WOUNDING == ADC_SAR_Seq_1_WOUNDING_10BIT))
 247:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)(~ADC_SAR_Seq_1_ALT_RESOLUTION_ON);
 248:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 249:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 250:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 251:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(chNum < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 252:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 253:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 254:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRe
 130              		.loc 1 254 0
 131 0084 3649     		ldr	r1, .L12+84
 132 0086 8C46     		mov	ip, r1
 133 0088 6244     		add	r2, r2, ip
 134 008a 1360     		str	r3, [r2]
 255:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 256:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 135              		.loc 1 256 0
 136 008c C307     		lsl	r3, r0, #31
 137 008e 08D5     		bpl	.L4
 138              	.LVL9:
 257:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 258:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 139              		.loc 1 258 0
ARM GAS  C:\temp\ccklmfMt.s 			page 8


 140 0090 2C49     		ldr	r1, .L12+56
 141 0092 0868     		ldr	r0, [r1]
 142 0094 8022     		mov	r2, #128
 143              	.LVL10:
 144 0096 5202     		lsl	r2, r2, #9
 145 0098 131C     		mov	r3, r2
 146 009a A340     		lsl	r3, r3, r4
 147 009c 1B0C     		lsr	r3, r3, #16
 148 009e 0343     		orr	r3, r0
 149 00a0 0B60     		str	r3, [r1]
 150              	.LVL11:
 151              	.L4:
 259:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 260:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 261:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 152              		.loc 1 261 0
 153 00a2 A300     		lsl	r3, r4, #2
 154 00a4 2D4A     		ldr	r2, .L12+80
 155              	.LVL12:
 156 00a6 9B58     		ldr	r3, [r3, r2]
 157 00a8 9B07     		lsl	r3, r3, #30
 158 00aa 08D5     		bpl	.L5
 262:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 263:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 159              		.loc 1 263 0
 160 00ac 2649     		ldr	r1, .L12+60
 161 00ae 0868     		ldr	r0, [r1]
 162 00b0 8022     		mov	r2, #128
 163              	.LVL13:
 164 00b2 5202     		lsl	r2, r2, #9
 165 00b4 131C     		mov	r3, r2
 166 00b6 A340     		lsl	r3, r3, r4
 167 00b8 1B0C     		lsr	r3, r3, #16
 168 00ba 0343     		orr	r3, r0
 169 00bc 0B60     		str	r3, [r1]
 170              	.L5:
 264:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 265:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 266:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 267:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             else
 268:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 269:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 CY_SET_REG32(ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_Seq_1_INJ_T
 270:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 271:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 272:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 273:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_SATURATE_MASK;
 274:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 275:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0
 277:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 278:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_RANGE_MASK;
 279:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 280:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 281:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 282:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 283:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_ALT_RESOLUTION_ON) != 0u)
 171              		.loc 1 283 0
ARM GAS  C:\temp\ccklmfMt.s 			page 9


 172 00be A300     		lsl	r3, r4, #2
 173 00c0 264A     		ldr	r2, .L12+80
 174              	.LVL14:
 175 00c2 9B58     		ldr	r3, [r3, r2]
 176 00c4 9A05     		lsl	r2, r3, #22
 177 00c6 02D5     		bpl	.L11
 178              	.LVL15:
 284:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 285:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_DEFAULT_MAX_WRK_ALT;
 179              		.loc 1 285 0
 180 00c8 8020     		mov	r0, #128
 181 00ca C000     		lsl	r0, r0, #3
 182 00cc 01E0     		b	.L6
 183              	.L11:
 286:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 287:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else
 288:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 289:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_SAR_WRK_MAX_12BIT;
 184              		.loc 1 289 0
 185 00ce 8020     		mov	r0, #128
 186 00d0 4001     		lsl	r0, r0, #5
 187              	.L6:
 188              	.LVL16:
 290:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 291:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 292:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_DIFFERENTIAL_EN) == 0u)
 189              		.loc 1 292 0
 190 00d2 DB05     		lsl	r3, r3, #23
 191 00d4 06D4     		bmi	.L7
 293:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 294:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if((ADC_SAR_Seq_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED) && \
 295:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 (ADC_SAR_Seq_1_DEFAULT_NEG_INPUT_SEL == ADC_SAR_Seq_1__VREF))
 296:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 297:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / -2);
 192              		.loc 1 297 0
 193 00d6 4308     		lsr	r3, r0, #1
 194 00d8 5B42     		neg	r3, r3
 195 00da 9BB2     		uxth	r3, r3
 196 00dc 6200     		lsl	r2, r4, #1
 197 00de 2149     		ldr	r1, .L12+88
 198 00e0 5352     		strh	r3, [r2, r1]
 199 00e2 03E0     		b	.L8
 200              	.L7:
 298:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 299:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 300:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED */
 301:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 302:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else    /* Differential channel */
 303:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 304:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED)
 305:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 306:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / 2);
 307:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 308:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 201              		.loc 1 308 0
 202 00e4 6300     		lsl	r3, r4, #1
 203 00e6 0021     		mov	r1, #0
ARM GAS  C:\temp\ccklmfMt.s 			page 10


 204 00e8 1E4A     		ldr	r2, .L12+88
 205 00ea 9952     		strh	r1, [r3, r2]
 206              	.L8:
 309:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED 
 310:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 311:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 312:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 207              		.loc 1 312 0 discriminator 2
 208 00ec 1E4B     		ldr	r3, .L12+92
 209 00ee 5843     		mul	r0, r3
 210              	.LVL17:
 211 00f0 1E4B     		ldr	r3, .L12+96
 212 00f2 9C46     		mov	ip, r3
 213 00f4 6044     		add	r0, r0, ip
 313:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 214              		.loc 1 313 0 discriminator 2
 215 00f6 1E49     		ldr	r1, .L12+100
 216 00f8 FFF7FEFF 		bl	__aeabi_idiv
 217              	.LVL18:
 312:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 218              		.loc 1 312 0 discriminator 2
 219 00fc 00B2     		sxth	r0, r0
 220 00fe A200     		lsl	r2, r4, #2
 221 0100 1C4B     		ldr	r3, .L12+104
 222 0102 D050     		str	r0, [r2, r3]
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 223              		.loc 1 233 0 discriminator 2
 224 0104 0134     		add	r4, r4, #1
 225              	.LVL19:
 226              	.L3:
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 227              		.loc 1 233 0 is_stmt 0 discriminator 1
 228 0106 042C     		cmp	r4, #4
 229 0108 B3D9     		bls	.L9
 314:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 315:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 230              		.loc 1 315 0 is_stmt 1
 231              		@ sp needed
 232              	.LVL20:
 233 010a 10BD     		pop	{r4, pc}
 234              	.L13:
 235              		.align	2
 236              	.L12:
 237 010c 00000000 		.word	ADC_SAR_Seq_1_ISR
 238 0110 20001A40 		.word	1075445792
 239 0114 80031A40 		.word	1075446656
 240 0118 E02E1010 		.word	269496032
 241 011c E02E0010 		.word	268447456
 242 0120 00001A40 		.word	1075445760
 243 0124 8D000080 		.word	-2147483507
 244 0128 04001A40 		.word	1075445764
 245 012c 0000FF07 		.word	134152192
 246 0130 18001A40 		.word	1075445784
 247 0134 1C001A40 		.word	1075445788
 248 0138 02000200 		.word	131074
 249 013c 10001A40 		.word	1075445776
 250 0140 14001A40 		.word	1075445780
ARM GAS  C:\temp\ccklmfMt.s 			page 11


 251 0144 28021A40 		.word	1075446312
 252 0148 38021A40 		.word	1075446328
 253 014c 18021A40 		.word	1075446296
 254 0150 000F1A40 		.word	1075449600
 255 0154 30001A40 		.word	1075445808
 256 0158 FFFFFFDF 		.word	-536870913
 257 015c 00000000 		.word	.LANCHOR0
 258 0160 80001A40 		.word	1075445888
 259 0164 00000000 		.word	ADC_SAR_Seq_1_offset
 260 0168 10270000 		.word	10000
 261 016c 72060000 		.word	1650
 262 0170 E40C0000 		.word	3300
 263 0174 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 264              		.cfi_endproc
 265              	.LFE1:
 266              		.size	ADC_SAR_Seq_1_Init, .-ADC_SAR_Seq_1_Init
 267              		.section	.text.ADC_SAR_Seq_1_Enable,"ax",%progbits
 268              		.align	2
 269              		.global	ADC_SAR_Seq_1_Enable
 270              		.code	16
 271              		.thumb_func
 272              		.type	ADC_SAR_Seq_1_Enable, %function
 273              	ADC_SAR_Seq_1_Enable:
 274              	.LFB2:
 316:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 317:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 318:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_1_Enable
 319:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 320:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 321:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 322:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Enables the clock and analog power for SAR ADC.
 323:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 324:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 325:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 326:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 327:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 328:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 329:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 330:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 331:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Enable(void)
 332:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 275              		.loc 1 332 0
 276              		.cfi_startproc
 277 0000 08B5     		push	{r3, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 3, -8
 280              		.cfi_offset 14, -4
 333:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if (0u == (ADC_SAR_Seq_1_SAR_CTRL_REG & ADC_SAR_Seq_1_ENABLE))
 281              		.loc 1 333 0
 282 0002 074B     		ldr	r3, .L16
 283 0004 1B68     		ldr	r3, [r3]
 284 0006 002B     		cmp	r3, #0
 285 0008 08DB     		blt	.L14
 334:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 335:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 336:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 337:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             while (0u != (ADC_SAR_Seq_1_SAR_STATUS_REG & ADC_SAR_Seq_1_STATUS_BUSY))
ARM GAS  C:\temp\ccklmfMt.s 			page 12


 338:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 339:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* wait for SAR to go idle to avoid deadlock */
 340:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 341:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 342:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 343:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_ENABLE;
 286              		.loc 1 343 0
 287 000a 054A     		ldr	r2, .L16
 288 000c 1368     		ldr	r3, [r2]
 289 000e 8021     		mov	r1, #128
 290 0010 0906     		lsl	r1, r1, #24
 291 0012 0B43     		orr	r3, r1
 292 0014 1360     		str	r3, [r2]
 344:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 345:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 346:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyDelayUs(ADC_SAR_Seq_1_10US_DELAY);         
 293              		.loc 1 346 0
 294 0016 0A20     		mov	r0, #10
 295 0018 FFF7FEFF 		bl	CyDelayUs
 296              	.LVL21:
 297              	.L14:
 347:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 348:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 298              		.loc 1 348 0
 299              		@ sp needed
 300 001c 08BD     		pop	{r3, pc}
 301              	.L17:
 302 001e C046     		.align	2
 303              	.L16:
 304 0020 00001A40 		.word	1075445760
 305              		.cfi_endproc
 306              	.LFE2:
 307              		.size	ADC_SAR_Seq_1_Enable, .-ADC_SAR_Seq_1_Enable
 308              		.section	.text.ADC_SAR_Seq_1_Start,"ax",%progbits
 309              		.align	2
 310              		.global	ADC_SAR_Seq_1_Start
 311              		.code	16
 312              		.thumb_func
 313              		.type	ADC_SAR_Seq_1_Start, %function
 314              	ADC_SAR_Seq_1_Start:
 315              	.LFB0:
  65:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
 316              		.loc 1 65 0
 317              		.cfi_startproc
 318 0000 08B5     		push	{r3, lr}
 319              		.cfi_def_cfa_offset 8
 320              		.cfi_offset 3, -8
 321              		.cfi_offset 14, -4
  67:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 322              		.loc 1 67 0
 323 0002 064B     		ldr	r3, .L20
 324 0004 1B78     		ldrb	r3, [r3]
 325 0006 002B     		cmp	r3, #0
 326 0008 04D1     		bne	.L19
  69:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
 327              		.loc 1 69 0
 328 000a FFF7FEFF 		bl	ADC_SAR_Seq_1_Init
ARM GAS  C:\temp\ccklmfMt.s 			page 13


 329              	.LVL22:
  70:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 330              		.loc 1 70 0
 331 000e 0122     		mov	r2, #1
 332 0010 024B     		ldr	r3, .L20
 333 0012 1A70     		strb	r2, [r3]
 334              	.L19:
  72:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 335              		.loc 1 72 0
 336 0014 FFF7FEFF 		bl	ADC_SAR_Seq_1_Enable
 337              	.LVL23:
  73:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 338              		.loc 1 73 0
 339              		@ sp needed
 340 0018 08BD     		pop	{r3, pc}
 341              	.L21:
 342 001a C046     		.align	2
 343              	.L20:
 344 001c 00000000 		.word	.LANCHOR1
 345              		.cfi_endproc
 346              	.LFE0:
 347              		.size	ADC_SAR_Seq_1_Start, .-ADC_SAR_Seq_1_Start
 348              		.section	.text.ADC_SAR_Seq_1_Stop,"ax",%progbits
 349              		.align	2
 350              		.global	ADC_SAR_Seq_1_Stop
 351              		.code	16
 352              		.thumb_func
 353              		.type	ADC_SAR_Seq_1_Stop, %function
 354              	ADC_SAR_Seq_1_Stop:
 355              	.LFB3:
 349:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 350:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 351:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 352:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Stop
 353:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 354:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 355:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 356:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 357:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mode.
 358:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 359:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 360:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 361:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 362:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 363:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 364:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 365:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 366:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Stop(void)
 367:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 356              		.loc 1 367 0
 357              		.cfi_startproc
 368:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG &= (uint32)~ADC_SAR_Seq_1_ENABLE;
 358              		.loc 1 368 0
 359 0000 024A     		ldr	r2, .L23
 360 0002 1368     		ldr	r3, [r2]
 361 0004 5B00     		lsl	r3, r3, #1
 362 0006 5B08     		lsr	r3, r3, #1
ARM GAS  C:\temp\ccklmfMt.s 			page 14


 363 0008 1360     		str	r3, [r2]
 369:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 364              		.loc 1 369 0
 365              		@ sp needed
 366 000a 7047     		bx	lr
 367              	.L24:
 368              		.align	2
 369              	.L23:
 370 000c 00001A40 		.word	1075445760
 371              		.cfi_endproc
 372              	.LFE3:
 373              		.size	ADC_SAR_Seq_1_Stop, .-ADC_SAR_Seq_1_Stop
 374              		.section	.text.ADC_SAR_Seq_1_StartConvert,"ax",%progbits
 375              		.align	2
 376              		.global	ADC_SAR_Seq_1_StartConvert
 377              		.code	16
 378              		.thumb_func
 379              		.type	ADC_SAR_Seq_1_StartConvert, %function
 380              	ADC_SAR_Seq_1_StartConvert:
 381              	.LFB4:
 370:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 371:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 372:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 373:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StartConvert
 374:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 375:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 376:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 377:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description:
 378:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  For free running mode, this API starts the conversion process and it
 379:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  runs continuously.
 380:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 381:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  In a triggered mode, this routine triggers every conversion by
 382:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 383:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  every conversion has to start by this API.
 384:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 385:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 386:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 387:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 388:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 389:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 390:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 391:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 392:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StartConvert(void)
 393:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 382              		.loc 1 393 0
 383              		.cfi_startproc
 394:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 395:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG |= ADC_SAR_Seq_1_CONTINUOUS_EN;
 384              		.loc 1 395 0
 385 0000 034A     		ldr	r2, .L26
 386 0002 1368     		ldr	r3, [r2]
 387 0004 8021     		mov	r1, #128
 388 0006 4902     		lsl	r1, r1, #9
 389 0008 0B43     		orr	r3, r1
 390 000a 1360     		str	r3, [r2]
 396:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else /* Firmware trigger */
 397:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_START_CTRL_REG = ADC_SAR_Seq_1_FW_TRIGGER;
ARM GAS  C:\temp\ccklmfMt.s 			page 15


 398:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 399:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 400:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 391              		.loc 1 400 0
 392              		@ sp needed
 393 000c 7047     		bx	lr
 394              	.L27:
 395 000e C046     		.align	2
 396              	.L26:
 397 0010 04001A40 		.word	1075445764
 398              		.cfi_endproc
 399              	.LFE4:
 400              		.size	ADC_SAR_Seq_1_StartConvert, .-ADC_SAR_Seq_1_StartConvert
 401              		.section	.text.ADC_SAR_Seq_1_StopConvert,"ax",%progbits
 402              		.align	2
 403              		.global	ADC_SAR_Seq_1_StopConvert
 404              		.code	16
 405              		.thumb_func
 406              		.type	ADC_SAR_Seq_1_StopConvert, %function
 407              	ADC_SAR_Seq_1_StopConvert:
 408              	.LFB5:
 401:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 402:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 403:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 404:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StopConvert
 405:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 406:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 407:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 408:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Forces the ADC to stop all conversions.
 409:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 410:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 411:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 412:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 413:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 414:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 415:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 416:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 417:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StopConvert(void)
 418:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 409              		.loc 1 418 0
 410              		.cfi_startproc
 419:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 420:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_Seq_1_CONTINUOUS_EN);
 411              		.loc 1 420 0
 412 0000 024A     		ldr	r2, .L29
 413 0002 1168     		ldr	r1, [r2]
 414 0004 024B     		ldr	r3, .L29+4
 415 0006 0B40     		and	r3, r1
 416 0008 1360     		str	r3, [r2]
 421:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 422:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 417              		.loc 1 422 0
 418              		@ sp needed
 419 000a 7047     		bx	lr
 420              	.L30:
 421              		.align	2
 422              	.L29:
ARM GAS  C:\temp\ccklmfMt.s 			page 16


 423 000c 04001A40 		.word	1075445764
 424 0010 FFFFFEFF 		.word	-65537
 425              		.cfi_endproc
 426              	.LFE5:
 427              		.size	ADC_SAR_Seq_1_StopConvert, .-ADC_SAR_Seq_1_StopConvert
 428              		.section	.text.ADC_SAR_Seq_1_IsEndConversion,"ax",%progbits
 429              		.align	2
 430              		.global	ADC_SAR_Seq_1_IsEndConversion
 431              		.code	16
 432              		.thumb_func
 433              		.type	ADC_SAR_Seq_1_IsEndConversion, %function
 434              	ADC_SAR_Seq_1_IsEndConversion:
 435              	.LFB6:
 423:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 424:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 425:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 426:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_IsEndConversion
 427:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 428:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 429:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 430:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Checks for ADC end of conversion for the case one
 431:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 432:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  as a software version of the EOC. This function provides the
 433:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  programmer with two options. In one mode this function
 434:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  immediately returns with the conversion status. In the other mode,
 435:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  the function does not return (blocking) until the conversion has
 436:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  completed.
 437:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 438:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 439:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 440:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 441:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 442:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              for injection channel
 443:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 444:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              channel conversion
 445:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 446:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 447:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 448:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 449:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 450:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 451:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint32 ADC_SAR_Seq_1_IsEndConversion(uint32 retMode)
 452:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 436              		.loc 1 452 0
 437              		.cfi_startproc
 438              	.LVL24:
 439 0000 021C     		mov	r2, r0
 440              	.LVL25:
 453:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 status = 0u;
 454:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 455:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS | ADC_SAR_Seq_1_WAIT_FOR_RESULT)) != 0u)
 441              		.loc 1 455 0
 442 0002 8307     		lsl	r3, r0, #30
 443 0004 0CD0     		beq	.L35
 444              	.LVL26:
 445              	.L34:
 456:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
ARM GAS  C:\temp\ccklmfMt.s 			page 17


 457:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         do
 458:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 459:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             status = ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_EOS_MASK;
 446              		.loc 1 459 0 discriminator 2
 447 0006 074B     		ldr	r3, .L36
 448 0008 1B68     		ldr	r3, [r3]
 449 000a 0120     		mov	r0, #1
 450 000c 1840     		and	r0, r3
 451              	.LVL27:
 460:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }while((status == 0u) && ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT) != 0u));
 452              		.loc 1 460 0 discriminator 2
 453 000e 01D1     		bne	.L33
 454              		.loc 1 460 0 is_stmt 0 discriminator 1
 455 0010 9307     		lsl	r3, r2, #30
 456 0012 F8D4     		bmi	.L34
 457              	.L33:
 461:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 462:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(status != 0u)
 458              		.loc 1 462 0 is_stmt 1
 459 0014 0028     		cmp	r0, #0
 460 0016 04D0     		beq	.L32
 463:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 464:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             /* Clear EOS bit */
 465:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_EOS_MASK;
 461              		.loc 1 465 0
 462 0018 0122     		mov	r2, #1
 463              	.LVL28:
 464 001a 024B     		ldr	r3, .L36
 465 001c 1A60     		str	r2, [r3]
 466 001e 00E0     		b	.L32
 467              	.LVL29:
 468              	.L35:
 453:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 469              		.loc 1 453 0
 470 0020 0020     		mov	r0, #0
 471              	.LVL30:
 472              	.L32:
 466:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 467:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 468:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 469:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 470:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS_INJ | ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ)) != 0u)
 471:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 472:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             do
 473:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 474:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 status |= ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_INJ_EOC_MASK;
 475:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }while(((status & ADC_SAR_Seq_1_INJ_EOC_MASK) == 0u) &&
 476:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ) != 0u));
 477:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 478:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((status & ADC_SAR_Seq_1_INJ_EOC_MASK) != 0u)
 479:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 480:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Clear Injection EOS bit */
 481:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_INJ_EOC_MASK;
 482:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 483:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 484:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 485:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\temp\ccklmfMt.s 			page 18


 486:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return (status);
 487:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 473              		.loc 1 487 0
 474              		@ sp needed
 475 0022 7047     		bx	lr
 476              	.L37:
 477              		.align	2
 478              	.L36:
 479 0024 10021A40 		.word	1075446288
 480              		.cfi_endproc
 481              	.LFE6:
 482              		.size	ADC_SAR_Seq_1_IsEndConversion, .-ADC_SAR_Seq_1_IsEndConversion
 483              		.section	.text.ADC_SAR_Seq_1_GetResult16,"ax",%progbits
 484              		.align	2
 485              		.global	ADC_SAR_Seq_1_GetResult16
 486              		.code	16
 487              		.thumb_func
 488              		.type	ADC_SAR_Seq_1_GetResult16, %function
 489              	ADC_SAR_Seq_1_GetResult16:
 490              	.LFB7:
 488:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 489:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 490:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 491:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_GetResult16
 492:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 493:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 494:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 495:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Gets the data available in the SAR DATA register.
 496:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 497:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 498:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 499:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 500:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 501:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 502:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Returns converted data as a signed 16-bit integer
 503:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 504:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 505:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** int16 ADC_SAR_Seq_1_GetResult16(uint32 chan)
 506:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 491              		.loc 1 506 0
 492              		.cfi_startproc
 493              	.LVL31:
 494 0000 10B5     		push	{r4, lr}
 495              		.cfi_def_cfa_offset 8
 496              		.cfi_offset 4, -8
 497              		.cfi_offset 14, -4
 498 0002 041E     		sub	r4, r0, #0
 507:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 result;
 508:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 509:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 510:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 499              		.loc 1 510 0
 500 0004 042C     		cmp	r4, #4
 501 0006 02D9     		bls	.L39
 502              		.loc 1 510 0 is_stmt 0 discriminator 1
 503 0008 0020     		mov	r0, #0
 504              	.LVL32:
ARM GAS  C:\temp\ccklmfMt.s 			page 19


 505 000a FFF7FEFF 		bl	CyHalt
 506              	.LVL33:
 507              	.L39:
 511:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 512:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(chan < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 508              		.loc 1 512 0 is_stmt 1
 509 000e 042C     		cmp	r4, #4
 510 0010 07D8     		bhi	.L41
 513:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 514:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) 
 511              		.loc 1 514 0
 512 0012 A400     		lsl	r4, r4, #2
 513              	.LVL34:
 514 0014 044B     		ldr	r3, .L42
 515 0016 9C46     		mov	ip, r3
 516 0018 6444     		add	r4, r4, ip
 517 001a 2068     		ldr	r0, [r4]
 518 001c 0004     		lsl	r0, r0, #16
 519 001e 000C     		lsr	r0, r0, #16
 520              	.LVL35:
 521 0020 00E0     		b	.L40
 522              	.LVL36:
 523              	.L41:
 515:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_RESULT_MASK;
 516:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 517:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     else
 518:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 519:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = ADC_SAR_Seq_1_SAR_INJ_RESULT_REG & ADC_SAR_Seq_1_RESULT_MASK;
 521:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 522:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = 0u;
 524              		.loc 1 522 0
 525 0022 0020     		mov	r0, #0
 526              	.LVL37:
 527              	.L40:
 523:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 524:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 525:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 526:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return ( (int16)result );
 528              		.loc 1 526 0
 529 0024 00B2     		sxth	r0, r0
 530              	.LVL38:
 527:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 531              		.loc 1 527 0
 532              		@ sp needed
 533 0026 10BD     		pop	{r4, pc}
 534              	.L43:
 535              		.align	2
 536              	.L42:
 537 0028 80011A40 		.word	1075446144
 538              		.cfi_endproc
 539              	.LFE7:
 540              		.size	ADC_SAR_Seq_1_GetResult16, .-ADC_SAR_Seq_1_GetResult16
 541              		.section	.text.ADC_SAR_Seq_1_SetChanMask,"ax",%progbits
 542              		.align	2
 543              		.global	ADC_SAR_Seq_1_SetChanMask
 544              		.code	16
ARM GAS  C:\temp\ccklmfMt.s 			page 20


 545              		.thumb_func
 546              		.type	ADC_SAR_Seq_1_SetChanMask, %function
 547              	ADC_SAR_Seq_1_SetChanMask:
 548              	.LFB8:
 528:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 529:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 530:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 531:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetChanMask
 532:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 533:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 534:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 535:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel enable mask.
 536:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 537:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 538:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that will be
 539:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 540:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 541:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 542:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This API will not enable the injection channel.
 543:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Examples: If the component is setup to sequence through 8
 544:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 545:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 546:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 547:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 548:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 549:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 550:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetChanMask(uint32 mask)
 551:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 549              		.loc 1 551 0
 550              		.cfi_startproc
 551              	.LVL39:
 552:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 552              		.loc 1 552 0
 553 0000 1F23     		mov	r3, #31
 554 0002 1840     		and	r0, r3
 555              	.LVL40:
 556 0004 014B     		ldr	r3, .L45
 557 0006 1860     		str	r0, [r3]
 553:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 558              		.loc 1 553 0
 559              		@ sp needed
 560 0008 7047     		bx	lr
 561              	.L46:
 562 000a C046     		.align	2
 563              	.L45:
 564 000c 20001A40 		.word	1075445792
 565              		.cfi_endproc
 566              	.LFE8:
 567              		.size	ADC_SAR_Seq_1_SetChanMask, .-ADC_SAR_Seq_1_SetChanMask
 568              		.section	.text.ADC_SAR_Seq_1_SetLowLimit,"ax",%progbits
 569              		.align	2
 570              		.global	ADC_SAR_Seq_1_SetLowLimit
 571              		.code	16
 572              		.thumb_func
 573              		.type	ADC_SAR_Seq_1_SetLowLimit, %function
 574              	ADC_SAR_Seq_1_SetLowLimit:
 575              	.LFB9:
ARM GAS  C:\temp\ccklmfMt.s 			page 21


 554:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 555:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 556:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 557:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 558:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 559:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_EnableInjection
 560:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 561:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 562:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 563:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Enables the injection channel for the next scan only.
 564:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 565:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 566:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 567:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 568:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 569:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 570:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 571:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 572:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     void ADC_SAR_Seq_1_EnableInjection(void)
 573:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 574:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_Seq_1_INJ_CHAN_EN;
 575:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 576:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 577:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 578:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 579:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 580:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 581:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLowLimit
 582:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 583:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 584:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 585:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 586:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 587:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 588:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  lowLimit: The low limit for a limit condition.
 589:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 590:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 591:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 592:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 593:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 594:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLowLimit(uint32 lowLimit)
 595:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 576              		.loc 1 595 0
 577              		.cfi_startproc
 578              	.LVL41:
 596:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_LOW_MASK);
 579              		.loc 1 596 0
 580 0000 054A     		ldr	r2, .L48
 581 0002 1368     		ldr	r3, [r2]
 582 0004 1B0C     		lsr	r3, r3, #16
 583 0006 1B04     		lsl	r3, r3, #16
 584 0008 1360     		str	r3, [r2]
 597:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_Seq_1_RANGE_LOW_MASK;
 585              		.loc 1 597 0
 586 000a 1368     		ldr	r3, [r2]
 587 000c 0004     		lsl	r0, r0, #16
 588              	.LVL42:
ARM GAS  C:\temp\ccklmfMt.s 			page 22


 589 000e 000C     		lsr	r0, r0, #16
 590 0010 1843     		orr	r0, r3
 591 0012 1060     		str	r0, [r2]
 598:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 592              		.loc 1 598 0
 593              		@ sp needed
 594 0014 7047     		bx	lr
 595              	.L49:
 596 0016 C046     		.align	2
 597              	.L48:
 598 0018 18001A40 		.word	1075445784
 599              		.cfi_endproc
 600              	.LFE9:
 601              		.size	ADC_SAR_Seq_1_SetLowLimit, .-ADC_SAR_Seq_1_SetLowLimit
 602              		.section	.text.ADC_SAR_Seq_1_SetHighLimit,"ax",%progbits
 603              		.align	2
 604              		.global	ADC_SAR_Seq_1_SetHighLimit
 605              		.code	16
 606              		.thumb_func
 607              		.type	ADC_SAR_Seq_1_SetHighLimit, %function
 608              	ADC_SAR_Seq_1_SetHighLimit:
 609              	.LFB10:
 599:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 600:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 601:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 602:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetHighLimit
 603:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 604:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 605:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 606:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 607:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 608:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 609:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  highLimit: The high limit for a limit condition.
 610:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 611:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 612:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 613:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 614:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 615:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetHighLimit(uint32 highLimit)
 616:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 610              		.loc 1 616 0
 611              		.cfi_startproc
 612              	.LVL43:
 617:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_HIGH_MASK);
 613              		.loc 1 617 0
 614 0000 044A     		ldr	r2, .L51
 615 0002 1368     		ldr	r3, [r2]
 616 0004 1B04     		lsl	r3, r3, #16
 617 0006 1B0C     		lsr	r3, r3, #16
 618 0008 1360     		str	r3, [r2]
 618:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_Seq_1_RANGE_HIGH_OFFSET);
 619              		.loc 1 618 0
 620 000a 1368     		ldr	r3, [r2]
 621 000c 0004     		lsl	r0, r0, #16
 622              	.LVL44:
 623 000e 1843     		orr	r0, r3
 624 0010 1060     		str	r0, [r2]
ARM GAS  C:\temp\ccklmfMt.s 			page 23


 619:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 625              		.loc 1 619 0
 626              		@ sp needed
 627 0012 7047     		bx	lr
 628              	.L52:
 629              		.align	2
 630              	.L51:
 631 0014 18001A40 		.word	1075445784
 632              		.cfi_endproc
 633              	.LFE10:
 634              		.size	ADC_SAR_Seq_1_SetHighLimit, .-ADC_SAR_Seq_1_SetHighLimit
 635              		.section	.text.ADC_SAR_Seq_1_SetLimitMask,"ax",%progbits
 636              		.align	2
 637              		.global	ADC_SAR_Seq_1_SetLimitMask
 638              		.code	16
 639              		.thumb_func
 640              		.type	ADC_SAR_Seq_1_SetLimitMask, %function
 641              	ADC_SAR_Seq_1_SetLimitMask:
 642              	.LFB11:
 620:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 621:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 622:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 623:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLimitMask
 624:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 625:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 626:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 627:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel limit condition mask.
 628:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 629:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 630:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 631:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 632:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 633:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 634:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 635:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 636:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 637:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 638:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 639:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLimitMask(uint32 mask)
 640:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 643              		.loc 1 640 0
 644              		.cfi_startproc
 645              	.LVL45:
 641:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 646              		.loc 1 641 0
 647 0000 1F23     		mov	r3, #31
 648 0002 1840     		and	r0, r3
 649              	.LVL46:
 650 0004 014B     		ldr	r3, .L54
 651 0006 1860     		str	r0, [r3]
 642:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 652              		.loc 1 642 0
 653              		@ sp needed
 654 0008 7047     		bx	lr
 655              	.L55:
 656 000a C046     		.align	2
 657              	.L54:
ARM GAS  C:\temp\ccklmfMt.s 			page 24


 658 000c 38021A40 		.word	1075446328
 659              		.cfi_endproc
 660              	.LFE11:
 661              		.size	ADC_SAR_Seq_1_SetLimitMask, .-ADC_SAR_Seq_1_SetLimitMask
 662              		.section	.text.ADC_SAR_Seq_1_SetSatMask,"ax",%progbits
 663              		.align	2
 664              		.global	ADC_SAR_Seq_1_SetSatMask
 665              		.code	16
 666              		.thumb_func
 667              		.type	ADC_SAR_Seq_1_SetSatMask, %function
 668              	ADC_SAR_Seq_1_SetSatMask:
 669              	.LFB12:
 643:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 644:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 645:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 646:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetSatMask
 647:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 648:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 649:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 650:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel saturation event mask.
 651:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 652:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 653:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 654:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 655:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 656:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 657:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 658:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 659:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 660:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 661:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 662:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetSatMask(uint32 mask)
 663:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 670              		.loc 1 663 0
 671              		.cfi_startproc
 672              	.LVL47:
 664:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 673              		.loc 1 664 0
 674 0000 1F23     		mov	r3, #31
 675 0002 1840     		and	r0, r3
 676              	.LVL48:
 677 0004 014B     		ldr	r3, .L57
 678 0006 1860     		str	r0, [r3]
 665:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 679              		.loc 1 665 0
 680              		@ sp needed
 681 0008 7047     		bx	lr
 682              	.L58:
 683 000a C046     		.align	2
 684              	.L57:
 685 000c 28021A40 		.word	1075446312
 686              		.cfi_endproc
 687              	.LFE12:
 688              		.size	ADC_SAR_Seq_1_SetSatMask, .-ADC_SAR_Seq_1_SetSatMask
 689              		.section	.text.ADC_SAR_Seq_1_SetOffset,"ax",%progbits
 690              		.align	2
 691              		.global	ADC_SAR_Seq_1_SetOffset
ARM GAS  C:\temp\ccklmfMt.s 			page 25


 692              		.code	16
 693              		.thumb_func
 694              		.type	ADC_SAR_Seq_1_SetOffset, %function
 695              	ADC_SAR_Seq_1_SetOffset:
 696              	.LFB13:
 666:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 667:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 668:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 669:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetOffset
 670:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 671:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 672:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 673:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   Description: Sets the ADC offset which is used by the functions
 674:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 675:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   to substract the offset from the given reading
 676:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   before calculating the voltage conversion.
 677:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 678:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 679:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 680:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  offset: This value is a measured value when the
 681:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *          inputs are shorted or connected to the same input voltage.
 682:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 683:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 684:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 685:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 686:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 687:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Offset:  Modified to set the user provided offset.
 688:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 689:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 690:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetOffset(uint32 chan, int16 offset)
 691:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 697              		.loc 1 691 0
 698              		.cfi_startproc
 699              	.LVL49:
 700 0000 38B5     		push	{r3, r4, r5, lr}
 701              		.cfi_def_cfa_offset 16
 702              		.cfi_offset 3, -16
 703              		.cfi_offset 4, -12
 704              		.cfi_offset 5, -8
 705              		.cfi_offset 14, -4
 706 0002 041C     		mov	r4, r0
 707 0004 0D1C     		mov	r5, r1
 692:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 693:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 708              		.loc 1 693 0
 709 0006 0428     		cmp	r0, #4
 710 0008 02D9     		bls	.L60
 711              		.loc 1 693 0 is_stmt 0 discriminator 1
 712 000a 0020     		mov	r0, #0
 713              	.LVL50:
 714 000c FFF7FEFF 		bl	CyHalt
 715              	.LVL51:
 716              	.L60:
 694:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 695:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_offset[chan] = offset;
 717              		.loc 1 695 0 is_stmt 1
 718 0010 6400     		lsl	r4, r4, #1
ARM GAS  C:\temp\ccklmfMt.s 			page 26


 719              	.LVL52:
 720 0012 014B     		ldr	r3, .L61
 721 0014 E552     		strh	r5, [r4, r3]
 696:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 722              		.loc 1 696 0
 723              		@ sp needed
 724 0016 38BD     		pop	{r3, r4, r5, pc}
 725              	.L62:
 726              		.align	2
 727              	.L61:
 728 0018 00000000 		.word	ADC_SAR_Seq_1_offset
 729              		.cfi_endproc
 730              	.LFE13:
 731              		.size	ADC_SAR_Seq_1_SetOffset, .-ADC_SAR_Seq_1_SetOffset
 732              		.section	.text.ADC_SAR_Seq_1_SetGain,"ax",%progbits
 733              		.align	2
 734              		.global	ADC_SAR_Seq_1_SetGain
 735              		.code	16
 736              		.thumb_func
 737              		.type	ADC_SAR_Seq_1_SetGain, %function
 738              	ADC_SAR_Seq_1_SetGain:
 739              	.LFB14:
 697:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 698:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 699:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 700:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetGain
 701:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 702:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 703:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 704:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 705:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion functions below. This value is set by default by the
 706:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  reference and input range settings. It should only be used to further
 707:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  calibrate the ADC with a known input or if an external reference is
 708:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 709:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 710:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion between ADC counts and voltage.
 711:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 712:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 713:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 714:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 715:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 716:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 717:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 718:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 719:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 720:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_CountsPer10Volt:  modified to set the ADC gain in counts
 721:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   per 10 volt.
 722:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 723:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 724:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetGain(uint32 chan, int32 adcGain)
 725:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 740              		.loc 1 725 0
 741              		.cfi_startproc
 742              	.LVL53:
 743 0000 38B5     		push	{r3, r4, r5, lr}
 744              		.cfi_def_cfa_offset 16
 745              		.cfi_offset 3, -16
ARM GAS  C:\temp\ccklmfMt.s 			page 27


 746              		.cfi_offset 4, -12
 747              		.cfi_offset 5, -8
 748              		.cfi_offset 14, -4
 749 0002 041C     		mov	r4, r0
 750 0004 0D1C     		mov	r5, r1
 726:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 727:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 751              		.loc 1 727 0
 752 0006 0428     		cmp	r0, #4
 753 0008 02D9     		bls	.L64
 754              		.loc 1 727 0 is_stmt 0 discriminator 1
 755 000a 0020     		mov	r0, #0
 756              	.LVL54:
 757 000c FFF7FEFF 		bl	CyHalt
 758              	.LVL55:
 759              	.L64:
 728:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 729:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_countsPer10Volt[chan] = adcGain;
 760              		.loc 1 729 0 is_stmt 1
 761 0010 A400     		lsl	r4, r4, #2
 762              	.LVL56:
 763 0012 014B     		ldr	r3, .L65
 764 0014 E550     		str	r5, [r4, r3]
 730:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 765              		.loc 1 730 0
 766              		@ sp needed
 767              	.LVL57:
 768 0016 38BD     		pop	{r3, r4, r5, pc}
 769              	.L66:
 770              		.align	2
 771              	.L65:
 772 0018 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 773              		.cfi_endproc
 774              	.LFE14:
 775              		.size	ADC_SAR_Seq_1_SetGain, .-ADC_SAR_Seq_1_SetGain
 776              		.section	.text.ADC_SAR_Seq_1_CountsTo_mVolts,"ax",%progbits
 777              		.align	2
 778              		.global	ADC_SAR_Seq_1_CountsTo_mVolts
 779              		.code	16
 780              		.thumb_func
 781              		.type	ADC_SAR_Seq_1_CountsTo_mVolts, %function
 782              	ADC_SAR_Seq_1_CountsTo_mVolts:
 783              	.LFB15:
 731:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 732:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 733:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_Seq_1__RIGHT)
 734:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 735:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 736:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 737:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_mVolts
 738:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 740:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 741:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to mVolts
 742:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 743:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 744:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
ARM GAS  C:\temp\ccklmfMt.s 			page 28


 745:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 746:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 747:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 748:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 749:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in mVolts
 750:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 751:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 752:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 753:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 754:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 755:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 756:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 757:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int16 ADC_SAR_Seq_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 758:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 784              		.loc 1 758 0
 785              		.cfi_startproc
 786              	.LVL58:
 787 0000 38B5     		push	{r3, r4, r5, lr}
 788              		.cfi_def_cfa_offset 16
 789              		.cfi_offset 3, -16
 790              		.cfi_offset 4, -12
 791              		.cfi_offset 5, -8
 792              		.cfi_offset 14, -4
 793 0002 041C     		mov	r4, r0
 794 0004 0D1C     		mov	r5, r1
 759:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int16 mVolts;
 760:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 761:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 762:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 795              		.loc 1 762 0
 796 0006 0428     		cmp	r0, #4
 797 0008 02D9     		bls	.L68
 798              		.loc 1 762 0 is_stmt 0 discriminator 1
 799 000a 0020     		mov	r0, #0
 800              	.LVL59:
 801 000c FFF7FEFF 		bl	CyHalt
 802              	.LVL60:
 803              	.L68:
 763:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 764:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 765:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 766:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 767:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 768:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 769:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 770:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 771:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 772:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 773:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 804              		.loc 1 773 0 is_stmt 1
 805 0010 6300     		lsl	r3, r4, #1
 806 0012 0F4A     		ldr	r2, .L71
 807 0014 995A     		ldrh	r1, [r3, r2]
 808 0016 691A     		sub	r1, r5, r1
 809 0018 09B2     		sxth	r1, r1
 810              	.LVL61:
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\temp\ccklmfMt.s 			page 29


 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 811              		.loc 1 775 0
 812 001a 0E48     		ldr	r0, .L71+4
 813 001c 021C     		mov	r2, r0
 814 001e 4A43     		mul	r2, r1
 776:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 815              		.loc 1 776 0
 816 0020 0029     		cmp	r1, #0
 817 0022 06DD     		ble	.L69
 818              		.loc 1 776 0 is_stmt 0 discriminator 1
 819 0024 A300     		lsl	r3, r4, #2
 820 0026 0C49     		ldr	r1, .L71+8
 821              	.LVL62:
 822 0028 5B58     		ldr	r3, [r3, r1]
 823 002a D80F     		lsr	r0, r3, #31
 824 002c C018     		add	r0, r0, r3
 825 002e 4310     		asr	r3, r0, #1
 826 0030 06E0     		b	.L70
 827              	.LVL63:
 828              	.L69:
 829              		.loc 1 776 0 discriminator 2
 830 0032 A300     		lsl	r3, r4, #2
 831 0034 0849     		ldr	r1, .L71+8
 832              	.LVL64:
 833 0036 5B58     		ldr	r3, [r3, r1]
 834 0038 D80F     		lsr	r0, r3, #31
 835 003a C318     		add	r3, r0, r3
 836 003c 5B10     		asr	r3, r3, #1
 837 003e 5B42     		neg	r3, r3
 838              	.L70:
 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 839              		.loc 1 775 0 is_stmt 1
 840 0040 D018     		add	r0, r2, r3
 777:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  / ADC_SAR_Seq_1_countsPer10Volt[chan]);
 841              		.loc 1 777 0
 842 0042 A400     		lsl	r4, r4, #2
 843              	.LVL65:
 844 0044 044B     		ldr	r3, .L71+8
 845 0046 E158     		ldr	r1, [r4, r3]
 846 0048 FFF7FEFF 		bl	__aeabi_idiv
 847              	.LVL66:
 778:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 779:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( mVolts );
 848              		.loc 1 779 0
 849 004c 00B2     		sxth	r0, r0
 780:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 850              		.loc 1 780 0
 851              		@ sp needed
 852 004e 38BD     		pop	{r3, r4, r5, pc}
 853              	.L72:
 854              		.align	2
 855              	.L71:
 856 0050 00000000 		.word	ADC_SAR_Seq_1_offset
 857 0054 10270000 		.word	10000
 858 0058 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 859              		.cfi_endproc
 860              	.LFE15:
ARM GAS  C:\temp\ccklmfMt.s 			page 30


 861              		.size	ADC_SAR_Seq_1_CountsTo_mVolts, .-ADC_SAR_Seq_1_CountsTo_mVolts
 862              		.global	__aeabi_lmul
 863              		.global	__aeabi_ldivmod
 864              		.section	.text.ADC_SAR_Seq_1_CountsTo_uVolts,"ax",%progbits
 865              		.align	2
 866              		.global	ADC_SAR_Seq_1_CountsTo_uVolts
 867              		.code	16
 868              		.thumb_func
 869              		.type	ADC_SAR_Seq_1_CountsTo_uVolts, %function
 870              	ADC_SAR_Seq_1_CountsTo_uVolts:
 871              	.LFB16:
 781:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 782:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 783:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 784:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_uVolts
 785:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 786:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 787:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 788:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to micro Volts
 789:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 790:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 791:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 792:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 793:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 794:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 795:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 796:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in uVolts
 797:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 798:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 799:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 800:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 801:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 802:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 803:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Theory:
 804:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 805:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 806:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  resolution.
 807:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 808:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 809:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 810:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 811:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 ADC_SAR_Seq_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 812:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 872              		.loc 1 812 0
 873              		.cfi_startproc
 874              	.LVL67:
 875 0000 38B5     		push	{r3, r4, r5, lr}
 876              		.cfi_def_cfa_offset 16
 877              		.cfi_offset 3, -16
 878              		.cfi_offset 4, -12
 879              		.cfi_offset 5, -8
 880              		.cfi_offset 14, -4
 881 0002 051C     		mov	r5, r0
 882 0004 0C1C     		mov	r4, r1
 813:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int64 uVolts;
 814:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 815:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
ARM GAS  C:\temp\ccklmfMt.s 			page 31


 816:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 883              		.loc 1 816 0
 884 0006 0428     		cmp	r0, #4
 885 0008 02D9     		bls	.L74
 886              		.loc 1 816 0 is_stmt 0 discriminator 1
 887 000a 0020     		mov	r0, #0
 888              	.LVL68:
 889 000c FFF7FEFF 		bl	CyHalt
 890              	.LVL69:
 891              	.L74:
 817:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 818:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 819:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 820:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 821:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 822:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 823:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 824:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 825:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 826:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 827:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 892              		.loc 1 827 0 is_stmt 1
 893 0010 6A00     		lsl	r2, r5, #1
 894 0012 084B     		ldr	r3, .L75
 895 0014 D05A     		ldrh	r0, [r2, r3]
 896 0016 201A     		sub	r0, r4, r0
 897 0018 00B2     		sxth	r0, r0
 898              	.LVL70:
 828:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 829:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         uVolts = ((int64)adcCounts * ADC_SAR_Seq_1_10UV_COUNTS) / ADC_SAR_Seq_1_countsPer10Volt[cha
 899              		.loc 1 829 0
 900 001a C117     		asr	r1, r0, #31
 901 001c 064A     		ldr	r2, .L75+4
 902 001e 0023     		mov	r3, #0
 903 0020 FFF7FEFF 		bl	__aeabi_lmul
 904              	.LVL71:
 905 0024 AD00     		lsl	r5, r5, #2
 906              	.LVL72:
 907 0026 054B     		ldr	r3, .L75+8
 908 0028 EA58     		ldr	r2, [r5, r3]
 909 002a D317     		asr	r3, r2, #31
 910 002c FFF7FEFF 		bl	__aeabi_ldivmod
 911              	.LVL73:
 830:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 831:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( (int32)uVolts );
 832:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 912              		.loc 1 832 0
 913              		@ sp needed
 914 0030 38BD     		pop	{r3, r4, r5, pc}
 915              	.L76:
 916 0032 C046     		.align	2
 917              	.L75:
 918 0034 00000000 		.word	ADC_SAR_Seq_1_offset
 919 0038 80969800 		.word	10000000
 920 003c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 921              		.cfi_endproc
 922              	.LFE16:
ARM GAS  C:\temp\ccklmfMt.s 			page 32


 923              		.size	ADC_SAR_Seq_1_CountsTo_uVolts, .-ADC_SAR_Seq_1_CountsTo_uVolts
 924              		.global	__aeabi_i2f
 925              		.global	__aeabi_fmul
 926              		.global	__aeabi_fdiv
 927              		.section	.text.ADC_SAR_Seq_1_CountsTo_Volts,"ax",%progbits
 928              		.align	2
 929              		.global	ADC_SAR_Seq_1_CountsTo_Volts
 930              		.code	16
 931              		.thumb_func
 932              		.type	ADC_SAR_Seq_1_CountsTo_Volts, %function
 933              	ADC_SAR_Seq_1_CountsTo_Volts:
 934              	.LFB17:
 833:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 834:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 835:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 836:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_Volts
 837:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 838:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 839:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 840:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 841:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 842:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 843:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 844:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 845:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Result from the ADC conversion
 846:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 847:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 848:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in Volts
 849:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 850:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 851:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to Volts.
 852:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 853:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 854:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 855:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 856:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     float32 ADC_SAR_Seq_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 857:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 935              		.loc 1 857 0
 936              		.cfi_startproc
 937              	.LVL74:
 938 0000 38B5     		push	{r3, r4, r5, lr}
 939              		.cfi_def_cfa_offset 16
 940              		.cfi_offset 3, -16
 941              		.cfi_offset 4, -12
 942              		.cfi_offset 5, -8
 943              		.cfi_offset 14, -4
 944 0002 041C     		mov	r4, r0
 945 0004 0D1C     		mov	r5, r1
 858:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         float32 volts;
 859:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 860:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 861:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 946              		.loc 1 861 0
 947 0006 0428     		cmp	r0, #4
 948 0008 02D9     		bls	.L78
 949              		.loc 1 861 0 is_stmt 0 discriminator 1
 950 000a 0020     		mov	r0, #0
ARM GAS  C:\temp\ccklmfMt.s 			page 33


 951              	.LVL75:
 952 000c FFF7FEFF 		bl	CyHalt
 953              	.LVL76:
 954              	.L78:
 862:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 863:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 864:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 865:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 866:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 867:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 868:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 869:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 870:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 871:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 872:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 955              		.loc 1 872 0 is_stmt 1
 956 0010 6200     		lsl	r2, r4, #1
 957 0012 0A4B     		ldr	r3, .L79
 958 0014 D05A     		ldrh	r0, [r2, r3]
 959 0016 281A     		sub	r0, r5, r0
 960 0018 00B2     		sxth	r0, r0
 961              	.LVL77:
 873:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 874:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         volts = ((float32)adcCounts * ADC_SAR_Seq_1_10V_COUNTS) / (float32)ADC_SAR_Seq_1_countsPer1
 962              		.loc 1 874 0
 963 001a FFF7FEFF 		bl	__aeabi_i2f
 964              	.LVL78:
 965 001e 0849     		ldr	r1, .L79+4
 966 0020 FFF7FEFF 		bl	__aeabi_fmul
 967              	.LVL79:
 968 0024 051C     		add	r5, r0, #0
 969 0026 A400     		lsl	r4, r4, #2
 970              	.LVL80:
 971 0028 064B     		ldr	r3, .L79+8
 972 002a E058     		ldr	r0, [r4, r3]
 973 002c FFF7FEFF 		bl	__aeabi_i2f
 974              	.LVL81:
 975 0030 011C     		add	r1, r0, #0
 976 0032 281C     		add	r0, r5, #0
 977 0034 FFF7FEFF 		bl	__aeabi_fdiv
 978              	.LVL82:
 875:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 876:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( volts );
 877:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 979              		.loc 1 877 0
 980              		@ sp needed
 981 0038 38BD     		pop	{r3, r4, r5, pc}
 982              	.L80:
 983 003a C046     		.align	2
 984              	.L79:
 985 003c 00000000 		.word	ADC_SAR_Seq_1_offset
 986 0040 00002041 		.word	1092616192
 987 0044 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 988              		.cfi_endproc
 989              	.LFE17:
 990              		.size	ADC_SAR_Seq_1_CountsTo_Volts, .-ADC_SAR_Seq_1_CountsTo_Volts
 991              		.comm	ADC_SAR_Seq_1_countsPer10Volt,20,4
ARM GAS  C:\temp\ccklmfMt.s 			page 34


 992              		.comm	ADC_SAR_Seq_1_offset,10,4
 993              		.global	ADC_SAR_Seq_1_initVar
 994              		.section	.rodata
 995              		.align	2
 996              		.set	.LANCHOR0,. + 0
 997              		.type	ADC_SAR_Seq_1_channelsConfig, %object
 998              		.size	ADC_SAR_Seq_1_channelsConfig, 20
 999              	ADC_SAR_Seq_1_channelsConfig:
 1000 0000 00000000 		.word	0
 1001 0004 00000000 		.word	0
 1002 0008 00010000 		.word	256
 1003 000c 00000000 		.word	0
 1004 0010 00000000 		.word	0
 1005              		.type	ADC_SAR_Seq_1_InputsPlacement.4740, %object
 1006              		.size	ADC_SAR_Seq_1_InputsPlacement.4740, 5
 1007              	ADC_SAR_Seq_1_InputsPlacement.4740:
 1008 0014 00       		.byte	0
 1009 0015 07       		.byte	7
 1010 0016 04       		.byte	4
 1011 0017 06       		.byte	6
 1012 0018 03       		.byte	3
 1013 0019 000000   		.bss
 1014              		.set	.LANCHOR1,. + 0
 1015              		.type	ADC_SAR_Seq_1_initVar, %object
 1016              		.size	ADC_SAR_Seq_1_initVar, 1
 1017              	ADC_SAR_Seq_1_initVar:
 1018 0000 00       		.space	1
 1019              		.text
 1020              	.Letext0:
 1021              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1022              		.file 3 ".\\Generated_Source\\PSoC4\\CyLib.h"
 1023              		.section	.debug_info,"",%progbits
 1024              	.Ldebug_info0:
 1025 0000 B4050000 		.4byte	0x5b4
 1026 0004 0400     		.2byte	0x4
 1027 0006 00000000 		.4byte	.Ldebug_abbrev0
 1028 000a 04       		.byte	0x4
 1029 000b 01       		.uleb128 0x1
 1030 000c EE020000 		.4byte	.LASF62
 1031 0010 01       		.byte	0x1
 1032 0011 73020000 		.4byte	.LASF63
 1033 0015 4C010000 		.4byte	.LASF64
 1034 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1035 001d 00000000 		.4byte	0
 1036 0021 00000000 		.4byte	.Ldebug_line0
 1037 0025 02       		.uleb128 0x2
 1038 0026 01       		.byte	0x1
 1039 0027 06       		.byte	0x6
 1040 0028 F8000000 		.4byte	.LASF0
 1041 002c 02       		.uleb128 0x2
 1042 002d 01       		.byte	0x1
 1043 002e 08       		.byte	0x8
 1044 002f D3030000 		.4byte	.LASF1
 1045 0033 02       		.uleb128 0x2
 1046 0034 02       		.byte	0x2
 1047 0035 05       		.byte	0x5
 1048 0036 E1030000 		.4byte	.LASF2
ARM GAS  C:\temp\ccklmfMt.s 			page 35


 1049 003a 02       		.uleb128 0x2
 1050 003b 02       		.byte	0x2
 1051 003c 07       		.byte	0x7
 1052 003d 27020000 		.4byte	.LASF3
 1053 0041 02       		.uleb128 0x2
 1054 0042 04       		.byte	0x4
 1055 0043 05       		.byte	0x5
 1056 0044 43010000 		.4byte	.LASF4
 1057 0048 02       		.uleb128 0x2
 1058 0049 04       		.byte	0x4
 1059 004a 07       		.byte	0x7
 1060 004b 05020000 		.4byte	.LASF5
 1061 004f 02       		.uleb128 0x2
 1062 0050 08       		.byte	0x8
 1063 0051 05       		.byte	0x5
 1064 0052 EA000000 		.4byte	.LASF6
 1065 0056 02       		.uleb128 0x2
 1066 0057 08       		.byte	0x8
 1067 0058 07       		.byte	0x7
 1068 0059 86000000 		.4byte	.LASF7
 1069 005d 03       		.uleb128 0x3
 1070 005e 04       		.byte	0x4
 1071 005f 05       		.byte	0x5
 1072 0060 696E7400 		.ascii	"int\000"
 1073 0064 02       		.uleb128 0x2
 1074 0065 04       		.byte	0x4
 1075 0066 07       		.byte	0x7
 1076 0067 F1010000 		.4byte	.LASF8
 1077 006b 04       		.uleb128 0x4
 1078 006c 92010000 		.4byte	.LASF9
 1079 0070 02       		.byte	0x2
 1080 0071 C2       		.byte	0xc2
 1081 0072 2C000000 		.4byte	0x2c
 1082 0076 04       		.uleb128 0x4
 1083 0077 15000000 		.4byte	.LASF10
 1084 007b 02       		.byte	0x2
 1085 007c C3       		.byte	0xc3
 1086 007d 3A000000 		.4byte	0x3a
 1087 0081 04       		.uleb128 0x4
 1088 0082 A9010000 		.4byte	.LASF11
 1089 0086 02       		.byte	0x2
 1090 0087 C4       		.byte	0xc4
 1091 0088 48000000 		.4byte	0x48
 1092 008c 04       		.uleb128 0x4
 1093 008d A7040000 		.4byte	.LASF12
 1094 0091 02       		.byte	0x2
 1095 0092 C6       		.byte	0xc6
 1096 0093 33000000 		.4byte	0x33
 1097 0097 04       		.uleb128 0x4
 1098 0098 1F010000 		.4byte	.LASF13
 1099 009c 02       		.byte	0x2
 1100 009d C7       		.byte	0xc7
 1101 009e 41000000 		.4byte	0x41
 1102 00a2 04       		.uleb128 0x4
 1103 00a3 9C020000 		.4byte	.LASF14
 1104 00a7 02       		.byte	0x2
 1105 00a8 C8       		.byte	0xc8
ARM GAS  C:\temp\ccklmfMt.s 			page 36


 1106 00a9 AD000000 		.4byte	0xad
 1107 00ad 02       		.uleb128 0x2
 1108 00ae 04       		.byte	0x4
 1109 00af 04       		.byte	0x4
 1110 00b0 93030000 		.4byte	.LASF15
 1111 00b4 02       		.uleb128 0x2
 1112 00b5 08       		.byte	0x8
 1113 00b6 04       		.byte	0x4
 1114 00b7 A2010000 		.4byte	.LASF16
 1115 00bb 04       		.uleb128 0x4
 1116 00bc 7C030000 		.4byte	.LASF17
 1117 00c0 02       		.byte	0x2
 1118 00c1 CD       		.byte	0xcd
 1119 00c2 4F000000 		.4byte	0x4f
 1120 00c6 02       		.uleb128 0x2
 1121 00c7 01       		.byte	0x1
 1122 00c8 08       		.byte	0x8
 1123 00c9 2D040000 		.4byte	.LASF18
 1124 00cd 05       		.uleb128 0x5
 1125 00ce 6D020000 		.4byte	.LASF19
 1126 00d2 02       		.byte	0x2
 1127 00d3 6E01     		.2byte	0x16e
 1128 00d5 D9000000 		.4byte	0xd9
 1129 00d9 06       		.uleb128 0x6
 1130 00da 81000000 		.4byte	0x81
 1131 00de 05       		.uleb128 0x5
 1132 00df 32040000 		.4byte	.LASF20
 1133 00e3 02       		.byte	0x2
 1134 00e4 7E01     		.2byte	0x17e
 1135 00e6 EA000000 		.4byte	0xea
 1136 00ea 07       		.uleb128 0x7
 1137 00eb 04       		.byte	0x4
 1138 00ec F0000000 		.4byte	0xf0
 1139 00f0 08       		.uleb128 0x8
 1140 00f1 02       		.uleb128 0x2
 1141 00f2 04       		.byte	0x4
 1142 00f3 07       		.byte	0x7
 1143 00f4 A4020000 		.4byte	.LASF21
 1144 00f8 09       		.uleb128 0x9
 1145 00f9 1C000000 		.4byte	.LASF26
 1146 00fd 01       		.byte	0x1
 1147 00fe 5F       		.byte	0x5f
 1148 00ff 00000000 		.4byte	.LFB1
 1149 0103 78010000 		.4byte	.LFE1-.LFB1
 1150 0107 01       		.uleb128 0x1
 1151 0108 9C       		.byte	0x9c
 1152 0109 73010000 		.4byte	0x173
 1153 010d 0A       		.uleb128 0xa
 1154 010e 22040000 		.4byte	.LASF22
 1155 0112 01       		.byte	0x1
 1156 0113 61       		.byte	0x61
 1157 0114 81000000 		.4byte	0x81
 1158 0118 00000000 		.4byte	.LLST0
 1159 011c 0A       		.uleb128 0xa
 1160 011d 1D020000 		.4byte	.LASF23
 1161 0121 01       		.byte	0x1
 1162 0122 62       		.byte	0x62
ARM GAS  C:\temp\ccklmfMt.s 			page 37


 1163 0123 81000000 		.4byte	0x81
 1164 0127 1F000000 		.4byte	.LLST1
 1165 012b 0A       		.uleb128 0xa
 1166 012c 37000000 		.4byte	.LASF24
 1167 0130 01       		.byte	0x1
 1168 0131 63       		.byte	0x63
 1169 0132 97000000 		.4byte	0x97
 1170 0136 25010000 		.4byte	.LLST2
 1171 013a 0B       		.uleb128 0xb
 1172 013b B2000000 		.4byte	.LASF25
 1173 013f 01       		.byte	0x1
 1174 0140 66       		.byte	0x66
 1175 0141 83010000 		.4byte	0x183
 1176 0145 05       		.uleb128 0x5
 1177 0146 03       		.byte	0x3
 1178 0147 14000000 		.4byte	ADC_SAR_Seq_1_InputsPlacement.4740
 1179 014b 0C       		.uleb128 0xc
 1180 014c 0A000000 		.4byte	.LVL0
 1181 0150 69050000 		.4byte	0x569
 1182 0154 63010000 		.4byte	0x163
 1183 0158 0D       		.uleb128 0xd
 1184 0159 01       		.uleb128 0x1
 1185 015a 51       		.byte	0x51
 1186 015b 01       		.uleb128 0x1
 1187 015c 33       		.byte	0x33
 1188 015d 0D       		.uleb128 0xd
 1189 015e 01       		.uleb128 0x1
 1190 015f 50       		.byte	0x50
 1191 0160 01       		.uleb128 0x1
 1192 0161 3E       		.byte	0x3e
 1193 0162 00       		.byte	0
 1194 0163 0E       		.uleb128 0xe
 1195 0164 12000000 		.4byte	.LVL1
 1196 0168 7F050000 		.4byte	0x57f
 1197 016c 0D       		.uleb128 0xd
 1198 016d 01       		.uleb128 0x1
 1199 016e 50       		.byte	0x50
 1200 016f 01       		.uleb128 0x1
 1201 0170 3E       		.byte	0x3e
 1202 0171 00       		.byte	0
 1203 0172 00       		.byte	0
 1204 0173 0F       		.uleb128 0xf
 1205 0174 6B000000 		.4byte	0x6b
 1206 0178 83010000 		.4byte	0x183
 1207 017c 10       		.uleb128 0x10
 1208 017d F1000000 		.4byte	0xf1
 1209 0181 04       		.byte	0x4
 1210 0182 00       		.byte	0
 1211 0183 11       		.uleb128 0x11
 1212 0184 73010000 		.4byte	0x173
 1213 0188 12       		.uleb128 0x12
 1214 0189 9D000000 		.4byte	.LASF27
 1215 018d 01       		.byte	0x1
 1216 018e 4B01     		.2byte	0x14b
 1217 0190 00000000 		.4byte	.LFB2
 1218 0194 24000000 		.4byte	.LFE2-.LFB2
 1219 0198 01       		.uleb128 0x1
ARM GAS  C:\temp\ccklmfMt.s 			page 38


 1220 0199 9C       		.byte	0x9c
 1221 019a AE010000 		.4byte	0x1ae
 1222 019e 0E       		.uleb128 0xe
 1223 019f 1C000000 		.4byte	.LVL21
 1224 01a3 99050000 		.4byte	0x599
 1225 01a7 0D       		.uleb128 0xd
 1226 01a8 01       		.uleb128 0x1
 1227 01a9 50       		.byte	0x50
 1228 01aa 01       		.uleb128 0x1
 1229 01ab 3A       		.byte	0x3a
 1230 01ac 00       		.byte	0
 1231 01ad 00       		.byte	0
 1232 01ae 13       		.uleb128 0x13
 1233 01af 72000000 		.4byte	.LASF28
 1234 01b3 01       		.byte	0x1
 1235 01b4 40       		.byte	0x40
 1236 01b5 00000000 		.4byte	.LFB0
 1237 01b9 20000000 		.4byte	.LFE0-.LFB0
 1238 01bd 01       		.uleb128 0x1
 1239 01be 9C       		.byte	0x9c
 1240 01bf D6010000 		.4byte	0x1d6
 1241 01c3 14       		.uleb128 0x14
 1242 01c4 0E000000 		.4byte	.LVL22
 1243 01c8 F8000000 		.4byte	0xf8
 1244 01cc 14       		.uleb128 0x14
 1245 01cd 18000000 		.4byte	.LVL23
 1246 01d1 88010000 		.4byte	0x188
 1247 01d5 00       		.byte	0
 1248 01d6 15       		.uleb128 0x15
 1249 01d7 AF030000 		.4byte	.LASF29
 1250 01db 01       		.byte	0x1
 1251 01dc 6E01     		.2byte	0x16e
 1252 01de 00000000 		.4byte	.LFB3
 1253 01e2 10000000 		.4byte	.LFE3-.LFB3
 1254 01e6 01       		.uleb128 0x1
 1255 01e7 9C       		.byte	0x9c
 1256 01e8 15       		.uleb128 0x15
 1257 01e9 3E000000 		.4byte	.LASF30
 1258 01ed 01       		.byte	0x1
 1259 01ee 8801     		.2byte	0x188
 1260 01f0 00000000 		.4byte	.LFB4
 1261 01f4 14000000 		.4byte	.LFE4-.LFB4
 1262 01f8 01       		.uleb128 0x1
 1263 01f9 9C       		.byte	0x9c
 1264 01fa 15       		.uleb128 0x15
 1265 01fb D4020000 		.4byte	.LASF31
 1266 01ff 01       		.byte	0x1
 1267 0200 A101     		.2byte	0x1a1
 1268 0202 00000000 		.4byte	.LFB5
 1269 0206 14000000 		.4byte	.LFE5-.LFB5
 1270 020a 01       		.uleb128 0x1
 1271 020b 9C       		.byte	0x9c
 1272 020c 16       		.uleb128 0x16
 1273 020d B6020000 		.4byte	.LASF33
 1274 0211 01       		.byte	0x1
 1275 0212 C301     		.2byte	0x1c3
 1276 0214 81000000 		.4byte	0x81
ARM GAS  C:\temp\ccklmfMt.s 			page 39


 1277 0218 00000000 		.4byte	.LFB6
 1278 021c 28000000 		.4byte	.LFE6-.LFB6
 1279 0220 01       		.uleb128 0x1
 1280 0221 9C       		.byte	0x9c
 1281 0222 47020000 		.4byte	0x247
 1282 0226 17       		.uleb128 0x17
 1283 0227 D3010000 		.4byte	.LASF35
 1284 022b 01       		.byte	0x1
 1285 022c C301     		.2byte	0x1c3
 1286 022e 81000000 		.4byte	0x81
 1287 0232 38010000 		.4byte	.LLST3
 1288 0236 18       		.uleb128 0x18
 1289 0237 88040000 		.4byte	.LASF32
 1290 023b 01       		.byte	0x1
 1291 023c C501     		.2byte	0x1c5
 1292 023e 81000000 		.4byte	0x81
 1293 0242 7D010000 		.4byte	.LLST4
 1294 0246 00       		.byte	0
 1295 0247 16       		.uleb128 0x16
 1296 0248 D0000000 		.4byte	.LASF34
 1297 024c 01       		.byte	0x1
 1298 024d F901     		.2byte	0x1f9
 1299 024f 8C000000 		.4byte	0x8c
 1300 0253 00000000 		.4byte	.LFB7
 1301 0257 2C000000 		.4byte	.LFE7-.LFB7
 1302 025b 01       		.uleb128 0x1
 1303 025c 9C       		.byte	0x9c
 1304 025d 91020000 		.4byte	0x291
 1305 0261 17       		.uleb128 0x17
 1306 0262 28040000 		.4byte	.LASF36
 1307 0266 01       		.byte	0x1
 1308 0267 F901     		.2byte	0x1f9
 1309 0269 81000000 		.4byte	0x81
 1310 026d B3010000 		.4byte	.LLST5
 1311 0271 18       		.uleb128 0x18
 1312 0272 C8040000 		.4byte	.LASF37
 1313 0276 01       		.byte	0x1
 1314 0277 FB01     		.2byte	0x1fb
 1315 0279 81000000 		.4byte	0x81
 1316 027d F8010000 		.4byte	.LLST6
 1317 0281 0E       		.uleb128 0xe
 1318 0282 0E000000 		.4byte	.LVL33
 1319 0286 AA050000 		.4byte	0x5aa
 1320 028a 0D       		.uleb128 0xd
 1321 028b 01       		.uleb128 0x1
 1322 028c 50       		.byte	0x50
 1323 028d 01       		.uleb128 0x1
 1324 028e 30       		.byte	0x30
 1325 028f 00       		.byte	0
 1326 0290 00       		.byte	0
 1327 0291 12       		.uleb128 0x12
 1328 0292 08040000 		.4byte	.LASF38
 1329 0296 01       		.byte	0x1
 1330 0297 2602     		.2byte	0x226
 1331 0299 00000000 		.4byte	.LFB8
 1332 029d 10000000 		.4byte	.LFE8-.LFB8
 1333 02a1 01       		.uleb128 0x1
ARM GAS  C:\temp\ccklmfMt.s 			page 40


 1334 02a2 9C       		.byte	0x9c
 1335 02a3 B8020000 		.4byte	0x2b8
 1336 02a7 17       		.uleb128 0x17
 1337 02a8 B0010000 		.4byte	.LASF39
 1338 02ac 01       		.byte	0x1
 1339 02ad 2602     		.2byte	0x226
 1340 02af 81000000 		.4byte	0x81
 1341 02b3 16020000 		.4byte	.LLST7
 1342 02b7 00       		.byte	0
 1343 02b8 12       		.uleb128 0x12
 1344 02b9 3F040000 		.4byte	.LASF40
 1345 02bd 01       		.byte	0x1
 1346 02be 5202     		.2byte	0x252
 1347 02c0 00000000 		.4byte	.LFB9
 1348 02c4 1C000000 		.4byte	.LFE9-.LFB9
 1349 02c8 01       		.uleb128 0x1
 1350 02c9 9C       		.byte	0x9c
 1351 02ca DF020000 		.4byte	0x2df
 1352 02ce 17       		.uleb128 0x17
 1353 02cf AD020000 		.4byte	.LASF41
 1354 02d3 01       		.byte	0x1
 1355 02d4 5202     		.2byte	0x252
 1356 02d6 81000000 		.4byte	0x81
 1357 02da 37020000 		.4byte	.LLST8
 1358 02de 00       		.byte	0
 1359 02df 12       		.uleb128 0x12
 1360 02e0 04010000 		.4byte	.LASF42
 1361 02e4 01       		.byte	0x1
 1362 02e5 6702     		.2byte	0x267
 1363 02e7 00000000 		.4byte	.LFB10
 1364 02eb 18000000 		.4byte	.LFE10-.LFB10
 1365 02ef 01       		.uleb128 0x1
 1366 02f0 9C       		.byte	0x9c
 1367 02f1 06030000 		.4byte	0x306
 1368 02f5 17       		.uleb128 0x17
 1369 02f6 C2030000 		.4byte	.LASF43
 1370 02fa 01       		.byte	0x1
 1371 02fb 6702     		.2byte	0x267
 1372 02fd 81000000 		.4byte	0x81
 1373 0301 58020000 		.4byte	.LLST9
 1374 0305 00       		.byte	0
 1375 0306 12       		.uleb128 0x12
 1376 0307 AD040000 		.4byte	.LASF44
 1377 030b 01       		.byte	0x1
 1378 030c 7F02     		.2byte	0x27f
 1379 030e 00000000 		.4byte	.LFB11
 1380 0312 10000000 		.4byte	.LFE11-.LFB11
 1381 0316 01       		.uleb128 0x1
 1382 0317 9C       		.byte	0x9c
 1383 0318 2D030000 		.4byte	0x32d
 1384 031c 17       		.uleb128 0x17
 1385 031d B0010000 		.4byte	.LASF39
 1386 0321 01       		.byte	0x1
 1387 0322 7F02     		.2byte	0x27f
 1388 0324 81000000 		.4byte	0x81
 1389 0328 79020000 		.4byte	.LLST10
 1390 032c 00       		.byte	0
ARM GAS  C:\temp\ccklmfMt.s 			page 41


 1391 032d 12       		.uleb128 0x12
 1392 032e 59000000 		.4byte	.LASF45
 1393 0332 01       		.byte	0x1
 1394 0333 9602     		.2byte	0x296
 1395 0335 00000000 		.4byte	.LFB12
 1396 0339 10000000 		.4byte	.LFE12-.LFB12
 1397 033d 01       		.uleb128 0x1
 1398 033e 9C       		.byte	0x9c
 1399 033f 54030000 		.4byte	0x354
 1400 0343 17       		.uleb128 0x17
 1401 0344 B0010000 		.4byte	.LASF39
 1402 0348 01       		.byte	0x1
 1403 0349 9602     		.2byte	0x296
 1404 034b 81000000 		.4byte	0x81
 1405 034f 9A020000 		.4byte	.LLST11
 1406 0353 00       		.byte	0
 1407 0354 12       		.uleb128 0x12
 1408 0355 8F040000 		.4byte	.LASF46
 1409 0359 01       		.byte	0x1
 1410 035a B202     		.2byte	0x2b2
 1411 035c 00000000 		.4byte	.LFB13
 1412 0360 1C000000 		.4byte	.LFE13-.LFB13
 1413 0364 01       		.uleb128 0x1
 1414 0365 9C       		.byte	0x9c
 1415 0366 9A030000 		.4byte	0x39a
 1416 036a 17       		.uleb128 0x17
 1417 036b 28040000 		.4byte	.LASF36
 1418 036f 01       		.byte	0x1
 1419 0370 B202     		.2byte	0x2b2
 1420 0372 81000000 		.4byte	0x81
 1421 0376 BB020000 		.4byte	.LLST12
 1422 037a 17       		.uleb128 0x17
 1423 037b 59040000 		.4byte	.LASF47
 1424 037f 01       		.byte	0x1
 1425 0380 B202     		.2byte	0x2b2
 1426 0382 8C000000 		.4byte	0x8c
 1427 0386 E7020000 		.4byte	.LLST13
 1428 038a 0E       		.uleb128 0xe
 1429 038b 10000000 		.4byte	.LVL51
 1430 038f AA050000 		.4byte	0x5aa
 1431 0393 0D       		.uleb128 0xd
 1432 0394 01       		.uleb128 0x1
 1433 0395 50       		.byte	0x50
 1434 0396 01       		.uleb128 0x1
 1435 0397 30       		.byte	0x30
 1436 0398 00       		.byte	0
 1437 0399 00       		.byte	0
 1438 039a 12       		.uleb128 0x12
 1439 039b 99030000 		.4byte	.LASF48
 1440 039f 01       		.byte	0x1
 1441 03a0 D402     		.2byte	0x2d4
 1442 03a2 00000000 		.4byte	.LFB14
 1443 03a6 1C000000 		.4byte	.LFE14-.LFB14
 1444 03aa 01       		.uleb128 0x1
 1445 03ab 9C       		.byte	0x9c
 1446 03ac E0030000 		.4byte	0x3e0
 1447 03b0 17       		.uleb128 0x17
ARM GAS  C:\temp\ccklmfMt.s 			page 42


 1448 03b1 28040000 		.4byte	.LASF36
 1449 03b5 01       		.byte	0x1
 1450 03b6 D402     		.2byte	0x2d4
 1451 03b8 81000000 		.4byte	0x81
 1452 03bc 08030000 		.4byte	.LLST14
 1453 03c0 17       		.uleb128 0x17
 1454 03c1 2F000000 		.4byte	.LASF49
 1455 03c5 01       		.byte	0x1
 1456 03c6 D402     		.2byte	0x2d4
 1457 03c8 97000000 		.4byte	0x97
 1458 03cc 34030000 		.4byte	.LLST15
 1459 03d0 0E       		.uleb128 0xe
 1460 03d1 10000000 		.4byte	.LVL55
 1461 03d5 AA050000 		.4byte	0x5aa
 1462 03d9 0D       		.uleb128 0xd
 1463 03da 01       		.uleb128 0x1
 1464 03db 50       		.byte	0x50
 1465 03dc 01       		.uleb128 0x1
 1466 03dd 30       		.byte	0x30
 1467 03de 00       		.byte	0
 1468 03df 00       		.byte	0
 1469 03e0 19       		.uleb128 0x19
 1470 03e1 B5010000 		.4byte	.LASF50
 1471 03e5 01       		.byte	0x1
 1472 03e6 F502     		.2byte	0x2f5
 1473 03e8 8C000000 		.4byte	0x8c
 1474 03ec 00000000 		.4byte	.LFB15
 1475 03f0 5C000000 		.4byte	.LFE15-.LFB15
 1476 03f4 01       		.uleb128 0x1
 1477 03f5 9C       		.byte	0x9c
 1478 03f6 38040000 		.4byte	0x438
 1479 03fa 17       		.uleb128 0x17
 1480 03fb 28040000 		.4byte	.LASF36
 1481 03ff 01       		.byte	0x1
 1482 0400 F502     		.2byte	0x2f5
 1483 0402 81000000 		.4byte	0x81
 1484 0406 64030000 		.4byte	.LLST16
 1485 040a 17       		.uleb128 0x17
 1486 040b 60040000 		.4byte	.LASF51
 1487 040f 01       		.byte	0x1
 1488 0410 F502     		.2byte	0x2f5
 1489 0412 8C000000 		.4byte	0x8c
 1490 0416 90030000 		.4byte	.LLST17
 1491 041a 1A       		.uleb128 0x1a
 1492 041b 66020000 		.4byte	.LASF52
 1493 041f 01       		.byte	0x1
 1494 0420 F702     		.2byte	0x2f7
 1495 0422 8C000000 		.4byte	0x8c
 1496 0426 01       		.uleb128 0x1
 1497 0427 50       		.byte	0x50
 1498 0428 0E       		.uleb128 0xe
 1499 0429 10000000 		.4byte	.LVL60
 1500 042d AA050000 		.4byte	0x5aa
 1501 0431 0D       		.uleb128 0xd
 1502 0432 01       		.uleb128 0x1
 1503 0433 50       		.byte	0x50
 1504 0434 01       		.uleb128 0x1
ARM GAS  C:\temp\ccklmfMt.s 			page 43


 1505 0435 30       		.byte	0x30
 1506 0436 00       		.byte	0
 1507 0437 00       		.byte	0
 1508 0438 19       		.uleb128 0x19
 1509 0439 25010000 		.4byte	.LASF53
 1510 043d 01       		.byte	0x1
 1511 043e 2B03     		.2byte	0x32b
 1512 0440 97000000 		.4byte	0x97
 1513 0444 00000000 		.4byte	.LFB16
 1514 0448 40000000 		.4byte	.LFE16-.LFB16
 1515 044c 01       		.uleb128 0x1
 1516 044d 9C       		.byte	0x9c
 1517 044e 8E040000 		.4byte	0x48e
 1518 0452 17       		.uleb128 0x17
 1519 0453 28040000 		.4byte	.LASF36
 1520 0457 01       		.byte	0x1
 1521 0458 2B03     		.2byte	0x32b
 1522 045a 81000000 		.4byte	0x81
 1523 045e C7030000 		.4byte	.LLST18
 1524 0462 17       		.uleb128 0x17
 1525 0463 60040000 		.4byte	.LASF51
 1526 0467 01       		.byte	0x1
 1527 0468 2B03     		.2byte	0x32b
 1528 046a 8C000000 		.4byte	0x8c
 1529 046e F3030000 		.4byte	.LLST19
 1530 0472 1B       		.uleb128 0x1b
 1531 0473 FE010000 		.4byte	.LASF65
 1532 0477 01       		.byte	0x1
 1533 0478 2D03     		.2byte	0x32d
 1534 047a BB000000 		.4byte	0xbb
 1535 047e 0E       		.uleb128 0xe
 1536 047f 10000000 		.4byte	.LVL69
 1537 0483 AA050000 		.4byte	0x5aa
 1538 0487 0D       		.uleb128 0xd
 1539 0488 01       		.uleb128 0x1
 1540 0489 50       		.byte	0x50
 1541 048a 01       		.uleb128 0x1
 1542 048b 30       		.byte	0x30
 1543 048c 00       		.byte	0
 1544 048d 00       		.byte	0
 1545 048e 19       		.uleb128 0x19
 1546 048f EB030000 		.4byte	.LASF54
 1547 0493 01       		.byte	0x1
 1548 0494 5803     		.2byte	0x358
 1549 0496 A2000000 		.4byte	0xa2
 1550 049a 00000000 		.4byte	.LFB17
 1551 049e 48000000 		.4byte	.LFE17-.LFB17
 1552 04a2 01       		.uleb128 0x1
 1553 04a3 9C       		.byte	0x9c
 1554 04a4 E6040000 		.4byte	0x4e6
 1555 04a8 17       		.uleb128 0x17
 1556 04a9 28040000 		.4byte	.LASF36
 1557 04ad 01       		.byte	0x1
 1558 04ae 5803     		.2byte	0x358
 1559 04b0 81000000 		.4byte	0x81
 1560 04b4 1F040000 		.4byte	.LLST20
 1561 04b8 17       		.uleb128 0x17
ARM GAS  C:\temp\ccklmfMt.s 			page 44


 1562 04b9 60040000 		.4byte	.LASF51
 1563 04bd 01       		.byte	0x1
 1564 04be 5803     		.2byte	0x358
 1565 04c0 8C000000 		.4byte	0x8c
 1566 04c4 4B040000 		.4byte	.LLST21
 1567 04c8 1A       		.uleb128 0x1a
 1568 04c9 17020000 		.4byte	.LASF55
 1569 04cd 01       		.byte	0x1
 1570 04ce 5A03     		.2byte	0x35a
 1571 04d0 A2000000 		.4byte	0xa2
 1572 04d4 01       		.uleb128 0x1
 1573 04d5 50       		.byte	0x50
 1574 04d6 0E       		.uleb128 0xe
 1575 04d7 10000000 		.4byte	.LVL76
 1576 04db AA050000 		.4byte	0x5aa
 1577 04df 0D       		.uleb128 0xd
 1578 04e0 01       		.uleb128 0x1
 1579 04e1 50       		.byte	0x50
 1580 04e2 01       		.uleb128 0x1
 1581 04e3 30       		.byte	0x30
 1582 04e4 00       		.byte	0
 1583 04e5 00       		.byte	0
 1584 04e6 0F       		.uleb128 0xf
 1585 04e7 81000000 		.4byte	0x81
 1586 04eb F6040000 		.4byte	0x4f6
 1587 04ef 10       		.uleb128 0x10
 1588 04f0 F1000000 		.4byte	0xf1
 1589 04f4 04       		.byte	0x4
 1590 04f5 00       		.byte	0
 1591 04f6 0B       		.uleb128 0xb
 1592 04f7 49020000 		.4byte	.LASF56
 1593 04fb 01       		.byte	0x1
 1594 04fc 21       		.byte	0x21
 1595 04fd 07050000 		.4byte	0x507
 1596 0501 05       		.uleb128 0x5
 1597 0502 03       		.byte	0x3
 1598 0503 00000000 		.4byte	ADC_SAR_Seq_1_channelsConfig
 1599 0507 11       		.uleb128 0x11
 1600 0508 E6040000 		.4byte	0x4e6
 1601 050c 1C       		.uleb128 0x1c
 1602 050d DB010000 		.4byte	.LASF57
 1603 0511 01       		.byte	0x1
 1604 0512 18       		.byte	0x18
 1605 0513 6B000000 		.4byte	0x6b
 1606 0517 05       		.uleb128 0x5
 1607 0518 03       		.byte	0x3
 1608 0519 00000000 		.4byte	ADC_SAR_Seq_1_initVar
 1609 051d 0F       		.uleb128 0xf
 1610 051e 8C000000 		.4byte	0x8c
 1611 0522 2D050000 		.4byte	0x52d
 1612 0526 10       		.uleb128 0x10
 1613 0527 F1000000 		.4byte	0xf1
 1614 052b 04       		.byte	0x4
 1615 052c 00       		.byte	0
 1616 052d 1C       		.uleb128 0x1c
 1617 052e 00000000 		.4byte	.LASF58
 1618 0532 01       		.byte	0x1
ARM GAS  C:\temp\ccklmfMt.s 			page 45


 1619 0533 19       		.byte	0x19
 1620 0534 3E050000 		.4byte	0x53e
 1621 0538 05       		.uleb128 0x5
 1622 0539 03       		.byte	0x3
 1623 053a 00000000 		.4byte	ADC_SAR_Seq_1_offset
 1624 053e 06       		.uleb128 0x6
 1625 053f 1D050000 		.4byte	0x51d
 1626 0543 0F       		.uleb128 0xf
 1627 0544 97000000 		.4byte	0x97
 1628 0548 53050000 		.4byte	0x553
 1629 054c 10       		.uleb128 0x10
 1630 054d F1000000 		.4byte	0xf1
 1631 0551 04       		.byte	0x4
 1632 0552 00       		.byte	0
 1633 0553 1C       		.uleb128 0x1c
 1634 0554 6A040000 		.4byte	.LASF59
 1635 0558 01       		.byte	0x1
 1636 0559 1A       		.byte	0x1a
 1637 055a 64050000 		.4byte	0x564
 1638 055e 05       		.uleb128 0x5
 1639 055f 03       		.byte	0x3
 1640 0560 00000000 		.4byte	ADC_SAR_Seq_1_countsPer10Volt
 1641 0564 06       		.uleb128 0x6
 1642 0565 43050000 		.4byte	0x543
 1643 0569 1D       		.uleb128 0x1d
 1644 056a 82030000 		.4byte	.LASF60
 1645 056e 03       		.byte	0x3
 1646 056f 49       		.byte	0x49
 1647 0570 7F050000 		.4byte	0x57f
 1648 0574 1E       		.uleb128 0x1e
 1649 0575 6B000000 		.4byte	0x6b
 1650 0579 1E       		.uleb128 0x1e
 1651 057a 6B000000 		.4byte	0x6b
 1652 057e 00       		.byte	0
 1653 057f 1F       		.uleb128 0x1f
 1654 0580 3A020000 		.4byte	.LASF66
 1655 0584 03       		.byte	0x3
 1656 0585 46       		.byte	0x46
 1657 0586 DE000000 		.4byte	0xde
 1658 058a 99050000 		.4byte	0x599
 1659 058e 1E       		.uleb128 0x1e
 1660 058f 6B000000 		.4byte	0x6b
 1661 0593 1E       		.uleb128 0x1e
 1662 0594 DE000000 		.4byte	0xde
 1663 0598 00       		.byte	0
 1664 0599 1D       		.uleb128 0x1d
 1665 059a 98010000 		.4byte	.LASF61
 1666 059e 03       		.byte	0x3
 1667 059f 58       		.byte	0x58
 1668 05a0 AA050000 		.4byte	0x5aa
 1669 05a4 1E       		.uleb128 0x1e
 1670 05a5 76000000 		.4byte	0x76
 1671 05a9 00       		.byte	0
 1672 05aa 20       		.uleb128 0x20
 1673 05ab CC030000 		.4byte	.LASF67
 1674 05af 03       		.byte	0x3
 1675 05b0 60       		.byte	0x60
ARM GAS  C:\temp\ccklmfMt.s 			page 46


 1676 05b1 1E       		.uleb128 0x1e
 1677 05b2 6B000000 		.4byte	0x6b
 1678 05b6 00       		.byte	0
 1679 05b7 00       		.byte	0
 1680              		.section	.debug_abbrev,"",%progbits
 1681              	.Ldebug_abbrev0:
 1682 0000 01       		.uleb128 0x1
 1683 0001 11       		.uleb128 0x11
 1684 0002 01       		.byte	0x1
 1685 0003 25       		.uleb128 0x25
 1686 0004 0E       		.uleb128 0xe
 1687 0005 13       		.uleb128 0x13
 1688 0006 0B       		.uleb128 0xb
 1689 0007 03       		.uleb128 0x3
 1690 0008 0E       		.uleb128 0xe
 1691 0009 1B       		.uleb128 0x1b
 1692 000a 0E       		.uleb128 0xe
 1693 000b 55       		.uleb128 0x55
 1694 000c 17       		.uleb128 0x17
 1695 000d 11       		.uleb128 0x11
 1696 000e 01       		.uleb128 0x1
 1697 000f 10       		.uleb128 0x10
 1698 0010 17       		.uleb128 0x17
 1699 0011 00       		.byte	0
 1700 0012 00       		.byte	0
 1701 0013 02       		.uleb128 0x2
 1702 0014 24       		.uleb128 0x24
 1703 0015 00       		.byte	0
 1704 0016 0B       		.uleb128 0xb
 1705 0017 0B       		.uleb128 0xb
 1706 0018 3E       		.uleb128 0x3e
 1707 0019 0B       		.uleb128 0xb
 1708 001a 03       		.uleb128 0x3
 1709 001b 0E       		.uleb128 0xe
 1710 001c 00       		.byte	0
 1711 001d 00       		.byte	0
 1712 001e 03       		.uleb128 0x3
 1713 001f 24       		.uleb128 0x24
 1714 0020 00       		.byte	0
 1715 0021 0B       		.uleb128 0xb
 1716 0022 0B       		.uleb128 0xb
 1717 0023 3E       		.uleb128 0x3e
 1718 0024 0B       		.uleb128 0xb
 1719 0025 03       		.uleb128 0x3
 1720 0026 08       		.uleb128 0x8
 1721 0027 00       		.byte	0
 1722 0028 00       		.byte	0
 1723 0029 04       		.uleb128 0x4
 1724 002a 16       		.uleb128 0x16
 1725 002b 00       		.byte	0
 1726 002c 03       		.uleb128 0x3
 1727 002d 0E       		.uleb128 0xe
 1728 002e 3A       		.uleb128 0x3a
 1729 002f 0B       		.uleb128 0xb
 1730 0030 3B       		.uleb128 0x3b
 1731 0031 0B       		.uleb128 0xb
 1732 0032 49       		.uleb128 0x49
ARM GAS  C:\temp\ccklmfMt.s 			page 47


 1733 0033 13       		.uleb128 0x13
 1734 0034 00       		.byte	0
 1735 0035 00       		.byte	0
 1736 0036 05       		.uleb128 0x5
 1737 0037 16       		.uleb128 0x16
 1738 0038 00       		.byte	0
 1739 0039 03       		.uleb128 0x3
 1740 003a 0E       		.uleb128 0xe
 1741 003b 3A       		.uleb128 0x3a
 1742 003c 0B       		.uleb128 0xb
 1743 003d 3B       		.uleb128 0x3b
 1744 003e 05       		.uleb128 0x5
 1745 003f 49       		.uleb128 0x49
 1746 0040 13       		.uleb128 0x13
 1747 0041 00       		.byte	0
 1748 0042 00       		.byte	0
 1749 0043 06       		.uleb128 0x6
 1750 0044 35       		.uleb128 0x35
 1751 0045 00       		.byte	0
 1752 0046 49       		.uleb128 0x49
 1753 0047 13       		.uleb128 0x13
 1754 0048 00       		.byte	0
 1755 0049 00       		.byte	0
 1756 004a 07       		.uleb128 0x7
 1757 004b 0F       		.uleb128 0xf
 1758 004c 00       		.byte	0
 1759 004d 0B       		.uleb128 0xb
 1760 004e 0B       		.uleb128 0xb
 1761 004f 49       		.uleb128 0x49
 1762 0050 13       		.uleb128 0x13
 1763 0051 00       		.byte	0
 1764 0052 00       		.byte	0
 1765 0053 08       		.uleb128 0x8
 1766 0054 15       		.uleb128 0x15
 1767 0055 00       		.byte	0
 1768 0056 27       		.uleb128 0x27
 1769 0057 19       		.uleb128 0x19
 1770 0058 00       		.byte	0
 1771 0059 00       		.byte	0
 1772 005a 09       		.uleb128 0x9
 1773 005b 2E       		.uleb128 0x2e
 1774 005c 01       		.byte	0x1
 1775 005d 3F       		.uleb128 0x3f
 1776 005e 19       		.uleb128 0x19
 1777 005f 03       		.uleb128 0x3
 1778 0060 0E       		.uleb128 0xe
 1779 0061 3A       		.uleb128 0x3a
 1780 0062 0B       		.uleb128 0xb
 1781 0063 3B       		.uleb128 0x3b
 1782 0064 0B       		.uleb128 0xb
 1783 0065 27       		.uleb128 0x27
 1784 0066 19       		.uleb128 0x19
 1785 0067 11       		.uleb128 0x11
 1786 0068 01       		.uleb128 0x1
 1787 0069 12       		.uleb128 0x12
 1788 006a 06       		.uleb128 0x6
 1789 006b 40       		.uleb128 0x40
ARM GAS  C:\temp\ccklmfMt.s 			page 48


 1790 006c 18       		.uleb128 0x18
 1791 006d 9642     		.uleb128 0x2116
 1792 006f 19       		.uleb128 0x19
 1793 0070 01       		.uleb128 0x1
 1794 0071 13       		.uleb128 0x13
 1795 0072 00       		.byte	0
 1796 0073 00       		.byte	0
 1797 0074 0A       		.uleb128 0xa
 1798 0075 34       		.uleb128 0x34
 1799 0076 00       		.byte	0
 1800 0077 03       		.uleb128 0x3
 1801 0078 0E       		.uleb128 0xe
 1802 0079 3A       		.uleb128 0x3a
 1803 007a 0B       		.uleb128 0xb
 1804 007b 3B       		.uleb128 0x3b
 1805 007c 0B       		.uleb128 0xb
 1806 007d 49       		.uleb128 0x49
 1807 007e 13       		.uleb128 0x13
 1808 007f 02       		.uleb128 0x2
 1809 0080 17       		.uleb128 0x17
 1810 0081 00       		.byte	0
 1811 0082 00       		.byte	0
 1812 0083 0B       		.uleb128 0xb
 1813 0084 34       		.uleb128 0x34
 1814 0085 00       		.byte	0
 1815 0086 03       		.uleb128 0x3
 1816 0087 0E       		.uleb128 0xe
 1817 0088 3A       		.uleb128 0x3a
 1818 0089 0B       		.uleb128 0xb
 1819 008a 3B       		.uleb128 0x3b
 1820 008b 0B       		.uleb128 0xb
 1821 008c 49       		.uleb128 0x49
 1822 008d 13       		.uleb128 0x13
 1823 008e 02       		.uleb128 0x2
 1824 008f 18       		.uleb128 0x18
 1825 0090 00       		.byte	0
 1826 0091 00       		.byte	0
 1827 0092 0C       		.uleb128 0xc
 1828 0093 898201   		.uleb128 0x4109
 1829 0096 01       		.byte	0x1
 1830 0097 11       		.uleb128 0x11
 1831 0098 01       		.uleb128 0x1
 1832 0099 31       		.uleb128 0x31
 1833 009a 13       		.uleb128 0x13
 1834 009b 01       		.uleb128 0x1
 1835 009c 13       		.uleb128 0x13
 1836 009d 00       		.byte	0
 1837 009e 00       		.byte	0
 1838 009f 0D       		.uleb128 0xd
 1839 00a0 8A8201   		.uleb128 0x410a
 1840 00a3 00       		.byte	0
 1841 00a4 02       		.uleb128 0x2
 1842 00a5 18       		.uleb128 0x18
 1843 00a6 9142     		.uleb128 0x2111
 1844 00a8 18       		.uleb128 0x18
 1845 00a9 00       		.byte	0
 1846 00aa 00       		.byte	0
ARM GAS  C:\temp\ccklmfMt.s 			page 49


 1847 00ab 0E       		.uleb128 0xe
 1848 00ac 898201   		.uleb128 0x4109
 1849 00af 01       		.byte	0x1
 1850 00b0 11       		.uleb128 0x11
 1851 00b1 01       		.uleb128 0x1
 1852 00b2 31       		.uleb128 0x31
 1853 00b3 13       		.uleb128 0x13
 1854 00b4 00       		.byte	0
 1855 00b5 00       		.byte	0
 1856 00b6 0F       		.uleb128 0xf
 1857 00b7 01       		.uleb128 0x1
 1858 00b8 01       		.byte	0x1
 1859 00b9 49       		.uleb128 0x49
 1860 00ba 13       		.uleb128 0x13
 1861 00bb 01       		.uleb128 0x1
 1862 00bc 13       		.uleb128 0x13
 1863 00bd 00       		.byte	0
 1864 00be 00       		.byte	0
 1865 00bf 10       		.uleb128 0x10
 1866 00c0 21       		.uleb128 0x21
 1867 00c1 00       		.byte	0
 1868 00c2 49       		.uleb128 0x49
 1869 00c3 13       		.uleb128 0x13
 1870 00c4 2F       		.uleb128 0x2f
 1871 00c5 0B       		.uleb128 0xb
 1872 00c6 00       		.byte	0
 1873 00c7 00       		.byte	0
 1874 00c8 11       		.uleb128 0x11
 1875 00c9 26       		.uleb128 0x26
 1876 00ca 00       		.byte	0
 1877 00cb 49       		.uleb128 0x49
 1878 00cc 13       		.uleb128 0x13
 1879 00cd 00       		.byte	0
 1880 00ce 00       		.byte	0
 1881 00cf 12       		.uleb128 0x12
 1882 00d0 2E       		.uleb128 0x2e
 1883 00d1 01       		.byte	0x1
 1884 00d2 3F       		.uleb128 0x3f
 1885 00d3 19       		.uleb128 0x19
 1886 00d4 03       		.uleb128 0x3
 1887 00d5 0E       		.uleb128 0xe
 1888 00d6 3A       		.uleb128 0x3a
 1889 00d7 0B       		.uleb128 0xb
 1890 00d8 3B       		.uleb128 0x3b
 1891 00d9 05       		.uleb128 0x5
 1892 00da 27       		.uleb128 0x27
 1893 00db 19       		.uleb128 0x19
 1894 00dc 11       		.uleb128 0x11
 1895 00dd 01       		.uleb128 0x1
 1896 00de 12       		.uleb128 0x12
 1897 00df 06       		.uleb128 0x6
 1898 00e0 40       		.uleb128 0x40
 1899 00e1 18       		.uleb128 0x18
 1900 00e2 9742     		.uleb128 0x2117
 1901 00e4 19       		.uleb128 0x19
 1902 00e5 01       		.uleb128 0x1
 1903 00e6 13       		.uleb128 0x13
ARM GAS  C:\temp\ccklmfMt.s 			page 50


 1904 00e7 00       		.byte	0
 1905 00e8 00       		.byte	0
 1906 00e9 13       		.uleb128 0x13
 1907 00ea 2E       		.uleb128 0x2e
 1908 00eb 01       		.byte	0x1
 1909 00ec 3F       		.uleb128 0x3f
 1910 00ed 19       		.uleb128 0x19
 1911 00ee 03       		.uleb128 0x3
 1912 00ef 0E       		.uleb128 0xe
 1913 00f0 3A       		.uleb128 0x3a
 1914 00f1 0B       		.uleb128 0xb
 1915 00f2 3B       		.uleb128 0x3b
 1916 00f3 0B       		.uleb128 0xb
 1917 00f4 27       		.uleb128 0x27
 1918 00f5 19       		.uleb128 0x19
 1919 00f6 11       		.uleb128 0x11
 1920 00f7 01       		.uleb128 0x1
 1921 00f8 12       		.uleb128 0x12
 1922 00f9 06       		.uleb128 0x6
 1923 00fa 40       		.uleb128 0x40
 1924 00fb 18       		.uleb128 0x18
 1925 00fc 9742     		.uleb128 0x2117
 1926 00fe 19       		.uleb128 0x19
 1927 00ff 01       		.uleb128 0x1
 1928 0100 13       		.uleb128 0x13
 1929 0101 00       		.byte	0
 1930 0102 00       		.byte	0
 1931 0103 14       		.uleb128 0x14
 1932 0104 898201   		.uleb128 0x4109
 1933 0107 00       		.byte	0
 1934 0108 11       		.uleb128 0x11
 1935 0109 01       		.uleb128 0x1
 1936 010a 31       		.uleb128 0x31
 1937 010b 13       		.uleb128 0x13
 1938 010c 00       		.byte	0
 1939 010d 00       		.byte	0
 1940 010e 15       		.uleb128 0x15
 1941 010f 2E       		.uleb128 0x2e
 1942 0110 00       		.byte	0
 1943 0111 3F       		.uleb128 0x3f
 1944 0112 19       		.uleb128 0x19
 1945 0113 03       		.uleb128 0x3
 1946 0114 0E       		.uleb128 0xe
 1947 0115 3A       		.uleb128 0x3a
 1948 0116 0B       		.uleb128 0xb
 1949 0117 3B       		.uleb128 0x3b
 1950 0118 05       		.uleb128 0x5
 1951 0119 27       		.uleb128 0x27
 1952 011a 19       		.uleb128 0x19
 1953 011b 11       		.uleb128 0x11
 1954 011c 01       		.uleb128 0x1
 1955 011d 12       		.uleb128 0x12
 1956 011e 06       		.uleb128 0x6
 1957 011f 40       		.uleb128 0x40
 1958 0120 18       		.uleb128 0x18
 1959 0121 9742     		.uleb128 0x2117
 1960 0123 19       		.uleb128 0x19
ARM GAS  C:\temp\ccklmfMt.s 			page 51


 1961 0124 00       		.byte	0
 1962 0125 00       		.byte	0
 1963 0126 16       		.uleb128 0x16
 1964 0127 2E       		.uleb128 0x2e
 1965 0128 01       		.byte	0x1
 1966 0129 3F       		.uleb128 0x3f
 1967 012a 19       		.uleb128 0x19
 1968 012b 03       		.uleb128 0x3
 1969 012c 0E       		.uleb128 0xe
 1970 012d 3A       		.uleb128 0x3a
 1971 012e 0B       		.uleb128 0xb
 1972 012f 3B       		.uleb128 0x3b
 1973 0130 05       		.uleb128 0x5
 1974 0131 27       		.uleb128 0x27
 1975 0132 19       		.uleb128 0x19
 1976 0133 49       		.uleb128 0x49
 1977 0134 13       		.uleb128 0x13
 1978 0135 11       		.uleb128 0x11
 1979 0136 01       		.uleb128 0x1
 1980 0137 12       		.uleb128 0x12
 1981 0138 06       		.uleb128 0x6
 1982 0139 40       		.uleb128 0x40
 1983 013a 18       		.uleb128 0x18
 1984 013b 9742     		.uleb128 0x2117
 1985 013d 19       		.uleb128 0x19
 1986 013e 01       		.uleb128 0x1
 1987 013f 13       		.uleb128 0x13
 1988 0140 00       		.byte	0
 1989 0141 00       		.byte	0
 1990 0142 17       		.uleb128 0x17
 1991 0143 05       		.uleb128 0x5
 1992 0144 00       		.byte	0
 1993 0145 03       		.uleb128 0x3
 1994 0146 0E       		.uleb128 0xe
 1995 0147 3A       		.uleb128 0x3a
 1996 0148 0B       		.uleb128 0xb
 1997 0149 3B       		.uleb128 0x3b
 1998 014a 05       		.uleb128 0x5
 1999 014b 49       		.uleb128 0x49
 2000 014c 13       		.uleb128 0x13
 2001 014d 02       		.uleb128 0x2
 2002 014e 17       		.uleb128 0x17
 2003 014f 00       		.byte	0
 2004 0150 00       		.byte	0
 2005 0151 18       		.uleb128 0x18
 2006 0152 34       		.uleb128 0x34
 2007 0153 00       		.byte	0
 2008 0154 03       		.uleb128 0x3
 2009 0155 0E       		.uleb128 0xe
 2010 0156 3A       		.uleb128 0x3a
 2011 0157 0B       		.uleb128 0xb
 2012 0158 3B       		.uleb128 0x3b
 2013 0159 05       		.uleb128 0x5
 2014 015a 49       		.uleb128 0x49
 2015 015b 13       		.uleb128 0x13
 2016 015c 02       		.uleb128 0x2
 2017 015d 17       		.uleb128 0x17
ARM GAS  C:\temp\ccklmfMt.s 			page 52


 2018 015e 00       		.byte	0
 2019 015f 00       		.byte	0
 2020 0160 19       		.uleb128 0x19
 2021 0161 2E       		.uleb128 0x2e
 2022 0162 01       		.byte	0x1
 2023 0163 3F       		.uleb128 0x3f
 2024 0164 19       		.uleb128 0x19
 2025 0165 03       		.uleb128 0x3
 2026 0166 0E       		.uleb128 0xe
 2027 0167 3A       		.uleb128 0x3a
 2028 0168 0B       		.uleb128 0xb
 2029 0169 3B       		.uleb128 0x3b
 2030 016a 05       		.uleb128 0x5
 2031 016b 27       		.uleb128 0x27
 2032 016c 19       		.uleb128 0x19
 2033 016d 49       		.uleb128 0x49
 2034 016e 13       		.uleb128 0x13
 2035 016f 11       		.uleb128 0x11
 2036 0170 01       		.uleb128 0x1
 2037 0171 12       		.uleb128 0x12
 2038 0172 06       		.uleb128 0x6
 2039 0173 40       		.uleb128 0x40
 2040 0174 18       		.uleb128 0x18
 2041 0175 9642     		.uleb128 0x2116
 2042 0177 19       		.uleb128 0x19
 2043 0178 01       		.uleb128 0x1
 2044 0179 13       		.uleb128 0x13
 2045 017a 00       		.byte	0
 2046 017b 00       		.byte	0
 2047 017c 1A       		.uleb128 0x1a
 2048 017d 34       		.uleb128 0x34
 2049 017e 00       		.byte	0
 2050 017f 03       		.uleb128 0x3
 2051 0180 0E       		.uleb128 0xe
 2052 0181 3A       		.uleb128 0x3a
 2053 0182 0B       		.uleb128 0xb
 2054 0183 3B       		.uleb128 0x3b
 2055 0184 05       		.uleb128 0x5
 2056 0185 49       		.uleb128 0x49
 2057 0186 13       		.uleb128 0x13
 2058 0187 02       		.uleb128 0x2
 2059 0188 18       		.uleb128 0x18
 2060 0189 00       		.byte	0
 2061 018a 00       		.byte	0
 2062 018b 1B       		.uleb128 0x1b
 2063 018c 34       		.uleb128 0x34
 2064 018d 00       		.byte	0
 2065 018e 03       		.uleb128 0x3
 2066 018f 0E       		.uleb128 0xe
 2067 0190 3A       		.uleb128 0x3a
 2068 0191 0B       		.uleb128 0xb
 2069 0192 3B       		.uleb128 0x3b
 2070 0193 05       		.uleb128 0x5
 2071 0194 49       		.uleb128 0x49
 2072 0195 13       		.uleb128 0x13
 2073 0196 00       		.byte	0
 2074 0197 00       		.byte	0
ARM GAS  C:\temp\ccklmfMt.s 			page 53


 2075 0198 1C       		.uleb128 0x1c
 2076 0199 34       		.uleb128 0x34
 2077 019a 00       		.byte	0
 2078 019b 03       		.uleb128 0x3
 2079 019c 0E       		.uleb128 0xe
 2080 019d 3A       		.uleb128 0x3a
 2081 019e 0B       		.uleb128 0xb
 2082 019f 3B       		.uleb128 0x3b
 2083 01a0 0B       		.uleb128 0xb
 2084 01a1 49       		.uleb128 0x49
 2085 01a2 13       		.uleb128 0x13
 2086 01a3 3F       		.uleb128 0x3f
 2087 01a4 19       		.uleb128 0x19
 2088 01a5 02       		.uleb128 0x2
 2089 01a6 18       		.uleb128 0x18
 2090 01a7 00       		.byte	0
 2091 01a8 00       		.byte	0
 2092 01a9 1D       		.uleb128 0x1d
 2093 01aa 2E       		.uleb128 0x2e
 2094 01ab 01       		.byte	0x1
 2095 01ac 3F       		.uleb128 0x3f
 2096 01ad 19       		.uleb128 0x19
 2097 01ae 03       		.uleb128 0x3
 2098 01af 0E       		.uleb128 0xe
 2099 01b0 3A       		.uleb128 0x3a
 2100 01b1 0B       		.uleb128 0xb
 2101 01b2 3B       		.uleb128 0x3b
 2102 01b3 0B       		.uleb128 0xb
 2103 01b4 27       		.uleb128 0x27
 2104 01b5 19       		.uleb128 0x19
 2105 01b6 3C       		.uleb128 0x3c
 2106 01b7 19       		.uleb128 0x19
 2107 01b8 01       		.uleb128 0x1
 2108 01b9 13       		.uleb128 0x13
 2109 01ba 00       		.byte	0
 2110 01bb 00       		.byte	0
 2111 01bc 1E       		.uleb128 0x1e
 2112 01bd 05       		.uleb128 0x5
 2113 01be 00       		.byte	0
 2114 01bf 49       		.uleb128 0x49
 2115 01c0 13       		.uleb128 0x13
 2116 01c1 00       		.byte	0
 2117 01c2 00       		.byte	0
 2118 01c3 1F       		.uleb128 0x1f
 2119 01c4 2E       		.uleb128 0x2e
 2120 01c5 01       		.byte	0x1
 2121 01c6 3F       		.uleb128 0x3f
 2122 01c7 19       		.uleb128 0x19
 2123 01c8 03       		.uleb128 0x3
 2124 01c9 0E       		.uleb128 0xe
 2125 01ca 3A       		.uleb128 0x3a
 2126 01cb 0B       		.uleb128 0xb
 2127 01cc 3B       		.uleb128 0x3b
 2128 01cd 0B       		.uleb128 0xb
 2129 01ce 27       		.uleb128 0x27
 2130 01cf 19       		.uleb128 0x19
 2131 01d0 49       		.uleb128 0x49
ARM GAS  C:\temp\ccklmfMt.s 			page 54


 2132 01d1 13       		.uleb128 0x13
 2133 01d2 3C       		.uleb128 0x3c
 2134 01d3 19       		.uleb128 0x19
 2135 01d4 01       		.uleb128 0x1
 2136 01d5 13       		.uleb128 0x13
 2137 01d6 00       		.byte	0
 2138 01d7 00       		.byte	0
 2139 01d8 20       		.uleb128 0x20
 2140 01d9 2E       		.uleb128 0x2e
 2141 01da 01       		.byte	0x1
 2142 01db 3F       		.uleb128 0x3f
 2143 01dc 19       		.uleb128 0x19
 2144 01dd 03       		.uleb128 0x3
 2145 01de 0E       		.uleb128 0xe
 2146 01df 3A       		.uleb128 0x3a
 2147 01e0 0B       		.uleb128 0xb
 2148 01e1 3B       		.uleb128 0x3b
 2149 01e2 0B       		.uleb128 0xb
 2150 01e3 27       		.uleb128 0x27
 2151 01e4 19       		.uleb128 0x19
 2152 01e5 3C       		.uleb128 0x3c
 2153 01e6 19       		.uleb128 0x19
 2154 01e7 00       		.byte	0
 2155 01e8 00       		.byte	0
 2156 01e9 00       		.byte	0
 2157              		.section	.debug_loc,"",%progbits
 2158              	.Ldebug_loc0:
 2159              	.LLST0:
 2160 0000 6E000000 		.4byte	.LVL5
 2161 0004 72000000 		.4byte	.LVL6
 2162 0008 0200     		.2byte	0x2
 2163 000a 30       		.byte	0x30
 2164 000b 9F       		.byte	0x9f
 2165 000c 72000000 		.4byte	.LVL6
 2166 0010 0A010000 		.4byte	.LVL20
 2167 0014 0100     		.2byte	0x1
 2168 0016 54       		.byte	0x54
 2169 0017 00000000 		.4byte	0
 2170 001b 00000000 		.4byte	0
 2171              	.LLST1:
 2172 001f 62000000 		.4byte	.LVL2
 2173 0023 66000000 		.4byte	.LVL3
 2174 0027 0100     		.2byte	0x1
 2175 0029 51       		.byte	0x51
 2176 002a 66000000 		.4byte	.LVL3
 2177 002e 72000000 		.4byte	.LVL6
 2178 0032 0100     		.2byte	0x1
 2179 0034 53       		.byte	0x53
 2180 0035 7E000000 		.4byte	.LVL7
 2181 0039 90000000 		.4byte	.LVL9
 2182 003d 0100     		.2byte	0x1
 2183 003f 53       		.byte	0x53
 2184 0040 90000000 		.4byte	.LVL9
 2185 0044 96000000 		.4byte	.LVL10
 2186 0048 0200     		.2byte	0x2
 2187 004a 72       		.byte	0x72
 2188 004b 00       		.sleb128 0
ARM GAS  C:\temp\ccklmfMt.s 			page 55


 2189 004c 96000000 		.4byte	.LVL10
 2190 0050 A2000000 		.4byte	.LVL11
 2191 0054 0700     		.2byte	0x7
 2192 0056 74       		.byte	0x74
 2193 0057 00       		.sleb128 0
 2194 0058 32       		.byte	0x32
 2195 0059 24       		.byte	0x24
 2196 005a 7C       		.byte	0x7c
 2197 005b 00       		.sleb128 0
 2198 005c 22       		.byte	0x22
 2199 005d A2000000 		.4byte	.LVL11
 2200 0061 A6000000 		.4byte	.LVL12
 2201 0065 1E00     		.2byte	0x1e
 2202 0067 74       		.byte	0x74
 2203 0068 00       		.sleb128 0
 2204 0069 32       		.byte	0x32
 2205 006a 24       		.byte	0x24
 2206 006b 03       		.byte	0x3
 2207 006c 00000000 		.4byte	.LANCHOR0
 2208 0070 22       		.byte	0x22
 2209 0071 06       		.byte	0x6
 2210 0072 0A       		.byte	0xa
 2211 0073 0037     		.2byte	0x3700
 2212 0075 1A       		.byte	0x1a
 2213 0076 74       		.byte	0x74
 2214 0077 00       		.sleb128 0
 2215 0078 03       		.byte	0x3
 2216 0079 14000000 		.4byte	.LANCHOR0+20
 2217 007d 22       		.byte	0x22
 2218 007e 94       		.byte	0x94
 2219 007f 01       		.byte	0x1
 2220 0080 08       		.byte	0x8
 2221 0081 FF       		.byte	0xff
 2222 0082 1A       		.byte	0x1a
 2223 0083 21       		.byte	0x21
 2224 0084 9F       		.byte	0x9f
 2225 0085 A6000000 		.4byte	.LVL12
 2226 0089 B2000000 		.4byte	.LVL13
 2227 008d 1A00     		.2byte	0x1a
 2228 008f 74       		.byte	0x74
 2229 0090 00       		.sleb128 0
 2230 0091 32       		.byte	0x32
 2231 0092 24       		.byte	0x24
 2232 0093 72       		.byte	0x72
 2233 0094 00       		.sleb128 0
 2234 0095 22       		.byte	0x22
 2235 0096 06       		.byte	0x6
 2236 0097 0A       		.byte	0xa
 2237 0098 0037     		.2byte	0x3700
 2238 009a 1A       		.byte	0x1a
 2239 009b 72       		.byte	0x72
 2240 009c 00       		.sleb128 0
 2241 009d 74       		.byte	0x74
 2242 009e 00       		.sleb128 0
 2243 009f 22       		.byte	0x22
 2244 00a0 23       		.byte	0x23
 2245 00a1 14       		.uleb128 0x14
ARM GAS  C:\temp\ccklmfMt.s 			page 56


 2246 00a2 94       		.byte	0x94
 2247 00a3 01       		.byte	0x1
 2248 00a4 08       		.byte	0x8
 2249 00a5 FF       		.byte	0xff
 2250 00a6 1A       		.byte	0x1a
 2251 00a7 21       		.byte	0x21
 2252 00a8 9F       		.byte	0x9f
 2253 00a9 B2000000 		.4byte	.LVL13
 2254 00ad C2000000 		.4byte	.LVL14
 2255 00b1 1E00     		.2byte	0x1e
 2256 00b3 74       		.byte	0x74
 2257 00b4 00       		.sleb128 0
 2258 00b5 32       		.byte	0x32
 2259 00b6 24       		.byte	0x24
 2260 00b7 03       		.byte	0x3
 2261 00b8 00000000 		.4byte	.LANCHOR0
 2262 00bc 22       		.byte	0x22
 2263 00bd 06       		.byte	0x6
 2264 00be 0A       		.byte	0xa
 2265 00bf 0037     		.2byte	0x3700
 2266 00c1 1A       		.byte	0x1a
 2267 00c2 74       		.byte	0x74
 2268 00c3 00       		.sleb128 0
 2269 00c4 03       		.byte	0x3
 2270 00c5 14000000 		.4byte	.LANCHOR0+20
 2271 00c9 22       		.byte	0x22
 2272 00ca 94       		.byte	0x94
 2273 00cb 01       		.byte	0x1
 2274 00cc 08       		.byte	0x8
 2275 00cd FF       		.byte	0xff
 2276 00ce 1A       		.byte	0x1a
 2277 00cf 21       		.byte	0x21
 2278 00d0 9F       		.byte	0x9f
 2279 00d1 C2000000 		.4byte	.LVL14
 2280 00d5 C8000000 		.4byte	.LVL15
 2281 00d9 1A00     		.2byte	0x1a
 2282 00db 74       		.byte	0x74
 2283 00dc 00       		.sleb128 0
 2284 00dd 32       		.byte	0x32
 2285 00de 24       		.byte	0x24
 2286 00df 72       		.byte	0x72
 2287 00e0 00       		.sleb128 0
 2288 00e1 22       		.byte	0x22
 2289 00e2 06       		.byte	0x6
 2290 00e3 0A       		.byte	0xa
 2291 00e4 0037     		.2byte	0x3700
 2292 00e6 1A       		.byte	0x1a
 2293 00e7 72       		.byte	0x72
 2294 00e8 00       		.sleb128 0
 2295 00e9 74       		.byte	0x74
 2296 00ea 00       		.sleb128 0
 2297 00eb 22       		.byte	0x22
 2298 00ec 23       		.byte	0x23
 2299 00ed 14       		.uleb128 0x14
 2300 00ee 94       		.byte	0x94
 2301 00ef 01       		.byte	0x1
 2302 00f0 08       		.byte	0x8
ARM GAS  C:\temp\ccklmfMt.s 			page 57


 2303 00f1 FF       		.byte	0xff
 2304 00f2 1A       		.byte	0x1a
 2305 00f3 21       		.byte	0x21
 2306 00f4 9F       		.byte	0x9f
 2307 00f5 C8000000 		.4byte	.LVL15
 2308 00f9 06010000 		.4byte	.LVL19
 2309 00fd 1E00     		.2byte	0x1e
 2310 00ff 74       		.byte	0x74
 2311 0100 00       		.sleb128 0
 2312 0101 32       		.byte	0x32
 2313 0102 24       		.byte	0x24
 2314 0103 03       		.byte	0x3
 2315 0104 00000000 		.4byte	.LANCHOR0
 2316 0108 22       		.byte	0x22
 2317 0109 06       		.byte	0x6
 2318 010a 0A       		.byte	0xa
 2319 010b 0037     		.2byte	0x3700
 2320 010d 1A       		.byte	0x1a
 2321 010e 74       		.byte	0x74
 2322 010f 00       		.sleb128 0
 2323 0110 03       		.byte	0x3
 2324 0111 14000000 		.4byte	.LANCHOR0+20
 2325 0115 22       		.byte	0x22
 2326 0116 94       		.byte	0x94
 2327 0117 01       		.byte	0x1
 2328 0118 08       		.byte	0x8
 2329 0119 FF       		.byte	0xff
 2330 011a 1A       		.byte	0x1a
 2331 011b 21       		.byte	0x21
 2332 011c 9F       		.byte	0x9f
 2333 011d 00000000 		.4byte	0
 2334 0121 00000000 		.4byte	0
 2335              	.LLST2:
 2336 0125 D2000000 		.4byte	.LVL16
 2337 0129 F0000000 		.4byte	.LVL17
 2338 012d 0100     		.2byte	0x1
 2339 012f 50       		.byte	0x50
 2340 0130 00000000 		.4byte	0
 2341 0134 00000000 		.4byte	0
 2342              	.LLST3:
 2343 0138 00000000 		.4byte	.LVL24
 2344 013c 06000000 		.4byte	.LVL26
 2345 0140 0100     		.2byte	0x1
 2346 0142 50       		.byte	0x50
 2347 0143 06000000 		.4byte	.LVL26
 2348 0147 1A000000 		.4byte	.LVL28
 2349 014b 0100     		.2byte	0x1
 2350 014d 52       		.byte	0x52
 2351 014e 1A000000 		.4byte	.LVL28
 2352 0152 20000000 		.4byte	.LVL29
 2353 0156 0400     		.2byte	0x4
 2354 0158 F3       		.byte	0xf3
 2355 0159 01       		.uleb128 0x1
 2356 015a 50       		.byte	0x50
 2357 015b 9F       		.byte	0x9f
 2358 015c 20000000 		.4byte	.LVL29
 2359 0160 22000000 		.4byte	.LVL30
ARM GAS  C:\temp\ccklmfMt.s 			page 58


 2360 0164 0100     		.2byte	0x1
 2361 0166 50       		.byte	0x50
 2362 0167 22000000 		.4byte	.LVL30
 2363 016b 28000000 		.4byte	.LFE6
 2364 016f 0400     		.2byte	0x4
 2365 0171 F3       		.byte	0xf3
 2366 0172 01       		.uleb128 0x1
 2367 0173 50       		.byte	0x50
 2368 0174 9F       		.byte	0x9f
 2369 0175 00000000 		.4byte	0
 2370 0179 00000000 		.4byte	0
 2371              	.LLST4:
 2372 017d 02000000 		.4byte	.LVL25
 2373 0181 06000000 		.4byte	.LVL26
 2374 0185 0200     		.2byte	0x2
 2375 0187 30       		.byte	0x30
 2376 0188 9F       		.byte	0x9f
 2377 0189 0E000000 		.4byte	.LVL27
 2378 018d 20000000 		.4byte	.LVL29
 2379 0191 0100     		.2byte	0x1
 2380 0193 50       		.byte	0x50
 2381 0194 20000000 		.4byte	.LVL29
 2382 0198 22000000 		.4byte	.LVL30
 2383 019c 0200     		.2byte	0x2
 2384 019e 30       		.byte	0x30
 2385 019f 9F       		.byte	0x9f
 2386 01a0 22000000 		.4byte	.LVL30
 2387 01a4 28000000 		.4byte	.LFE6
 2388 01a8 0100     		.2byte	0x1
 2389 01aa 50       		.byte	0x50
 2390 01ab 00000000 		.4byte	0
 2391 01af 00000000 		.4byte	0
 2392              	.LLST5:
 2393 01b3 00000000 		.4byte	.LVL31
 2394 01b7 0A000000 		.4byte	.LVL32
 2395 01bb 0100     		.2byte	0x1
 2396 01bd 50       		.byte	0x50
 2397 01be 0A000000 		.4byte	.LVL32
 2398 01c2 14000000 		.4byte	.LVL34
 2399 01c6 0100     		.2byte	0x1
 2400 01c8 54       		.byte	0x54
 2401 01c9 14000000 		.4byte	.LVL34
 2402 01cd 22000000 		.4byte	.LVL36
 2403 01d1 0400     		.2byte	0x4
 2404 01d3 F3       		.byte	0xf3
 2405 01d4 01       		.uleb128 0x1
 2406 01d5 50       		.byte	0x50
 2407 01d6 9F       		.byte	0x9f
 2408 01d7 22000000 		.4byte	.LVL36
 2409 01db 24000000 		.4byte	.LVL37
 2410 01df 0100     		.2byte	0x1
 2411 01e1 54       		.byte	0x54
 2412 01e2 24000000 		.4byte	.LVL37
 2413 01e6 2C000000 		.4byte	.LFE7
 2414 01ea 0400     		.2byte	0x4
 2415 01ec F3       		.byte	0xf3
 2416 01ed 01       		.uleb128 0x1
ARM GAS  C:\temp\ccklmfMt.s 			page 59


 2417 01ee 50       		.byte	0x50
 2418 01ef 9F       		.byte	0x9f
 2419 01f0 00000000 		.4byte	0
 2420 01f4 00000000 		.4byte	0
 2421              	.LLST6:
 2422 01f8 20000000 		.4byte	.LVL35
 2423 01fc 22000000 		.4byte	.LVL36
 2424 0200 0100     		.2byte	0x1
 2425 0202 50       		.byte	0x50
 2426 0203 24000000 		.4byte	.LVL37
 2427 0207 26000000 		.4byte	.LVL38
 2428 020b 0100     		.2byte	0x1
 2429 020d 50       		.byte	0x50
 2430 020e 00000000 		.4byte	0
 2431 0212 00000000 		.4byte	0
 2432              	.LLST7:
 2433 0216 00000000 		.4byte	.LVL39
 2434 021a 04000000 		.4byte	.LVL40
 2435 021e 0100     		.2byte	0x1
 2436 0220 50       		.byte	0x50
 2437 0221 04000000 		.4byte	.LVL40
 2438 0225 10000000 		.4byte	.LFE8
 2439 0229 0400     		.2byte	0x4
 2440 022b F3       		.byte	0xf3
 2441 022c 01       		.uleb128 0x1
 2442 022d 50       		.byte	0x50
 2443 022e 9F       		.byte	0x9f
 2444 022f 00000000 		.4byte	0
 2445 0233 00000000 		.4byte	0
 2446              	.LLST8:
 2447 0237 00000000 		.4byte	.LVL41
 2448 023b 0E000000 		.4byte	.LVL42
 2449 023f 0100     		.2byte	0x1
 2450 0241 50       		.byte	0x50
 2451 0242 0E000000 		.4byte	.LVL42
 2452 0246 1C000000 		.4byte	.LFE9
 2453 024a 0400     		.2byte	0x4
 2454 024c F3       		.byte	0xf3
 2455 024d 01       		.uleb128 0x1
 2456 024e 50       		.byte	0x50
 2457 024f 9F       		.byte	0x9f
 2458 0250 00000000 		.4byte	0
 2459 0254 00000000 		.4byte	0
 2460              	.LLST9:
 2461 0258 00000000 		.4byte	.LVL43
 2462 025c 0E000000 		.4byte	.LVL44
 2463 0260 0100     		.2byte	0x1
 2464 0262 50       		.byte	0x50
 2465 0263 0E000000 		.4byte	.LVL44
 2466 0267 18000000 		.4byte	.LFE10
 2467 026b 0400     		.2byte	0x4
 2468 026d F3       		.byte	0xf3
 2469 026e 01       		.uleb128 0x1
 2470 026f 50       		.byte	0x50
 2471 0270 9F       		.byte	0x9f
 2472 0271 00000000 		.4byte	0
 2473 0275 00000000 		.4byte	0
ARM GAS  C:\temp\ccklmfMt.s 			page 60


 2474              	.LLST10:
 2475 0279 00000000 		.4byte	.LVL45
 2476 027d 04000000 		.4byte	.LVL46
 2477 0281 0100     		.2byte	0x1
 2478 0283 50       		.byte	0x50
 2479 0284 04000000 		.4byte	.LVL46
 2480 0288 10000000 		.4byte	.LFE11
 2481 028c 0400     		.2byte	0x4
 2482 028e F3       		.byte	0xf3
 2483 028f 01       		.uleb128 0x1
 2484 0290 50       		.byte	0x50
 2485 0291 9F       		.byte	0x9f
 2486 0292 00000000 		.4byte	0
 2487 0296 00000000 		.4byte	0
 2488              	.LLST11:
 2489 029a 00000000 		.4byte	.LVL47
 2490 029e 04000000 		.4byte	.LVL48
 2491 02a2 0100     		.2byte	0x1
 2492 02a4 50       		.byte	0x50
 2493 02a5 04000000 		.4byte	.LVL48
 2494 02a9 10000000 		.4byte	.LFE12
 2495 02ad 0400     		.2byte	0x4
 2496 02af F3       		.byte	0xf3
 2497 02b0 01       		.uleb128 0x1
 2498 02b1 50       		.byte	0x50
 2499 02b2 9F       		.byte	0x9f
 2500 02b3 00000000 		.4byte	0
 2501 02b7 00000000 		.4byte	0
 2502              	.LLST12:
 2503 02bb 00000000 		.4byte	.LVL49
 2504 02bf 0C000000 		.4byte	.LVL50
 2505 02c3 0100     		.2byte	0x1
 2506 02c5 50       		.byte	0x50
 2507 02c6 0C000000 		.4byte	.LVL50
 2508 02ca 12000000 		.4byte	.LVL52
 2509 02ce 0100     		.2byte	0x1
 2510 02d0 54       		.byte	0x54
 2511 02d1 12000000 		.4byte	.LVL52
 2512 02d5 1C000000 		.4byte	.LFE13
 2513 02d9 0400     		.2byte	0x4
 2514 02db F3       		.byte	0xf3
 2515 02dc 01       		.uleb128 0x1
 2516 02dd 50       		.byte	0x50
 2517 02de 9F       		.byte	0x9f
 2518 02df 00000000 		.4byte	0
 2519 02e3 00000000 		.4byte	0
 2520              	.LLST13:
 2521 02e7 00000000 		.4byte	.LVL49
 2522 02eb 0F000000 		.4byte	.LVL51-1
 2523 02ef 0100     		.2byte	0x1
 2524 02f1 51       		.byte	0x51
 2525 02f2 0F000000 		.4byte	.LVL51-1
 2526 02f6 1C000000 		.4byte	.LFE13
 2527 02fa 0400     		.2byte	0x4
 2528 02fc F3       		.byte	0xf3
 2529 02fd 01       		.uleb128 0x1
 2530 02fe 51       		.byte	0x51
ARM GAS  C:\temp\ccklmfMt.s 			page 61


 2531 02ff 9F       		.byte	0x9f
 2532 0300 00000000 		.4byte	0
 2533 0304 00000000 		.4byte	0
 2534              	.LLST14:
 2535 0308 00000000 		.4byte	.LVL53
 2536 030c 0C000000 		.4byte	.LVL54
 2537 0310 0100     		.2byte	0x1
 2538 0312 50       		.byte	0x50
 2539 0313 0C000000 		.4byte	.LVL54
 2540 0317 12000000 		.4byte	.LVL56
 2541 031b 0100     		.2byte	0x1
 2542 031d 54       		.byte	0x54
 2543 031e 12000000 		.4byte	.LVL56
 2544 0322 1C000000 		.4byte	.LFE14
 2545 0326 0400     		.2byte	0x4
 2546 0328 F3       		.byte	0xf3
 2547 0329 01       		.uleb128 0x1
 2548 032a 50       		.byte	0x50
 2549 032b 9F       		.byte	0x9f
 2550 032c 00000000 		.4byte	0
 2551 0330 00000000 		.4byte	0
 2552              	.LLST15:
 2553 0334 00000000 		.4byte	.LVL53
 2554 0338 0F000000 		.4byte	.LVL55-1
 2555 033c 0100     		.2byte	0x1
 2556 033e 51       		.byte	0x51
 2557 033f 0F000000 		.4byte	.LVL55-1
 2558 0343 16000000 		.4byte	.LVL57
 2559 0347 0100     		.2byte	0x1
 2560 0349 55       		.byte	0x55
 2561 034a 16000000 		.4byte	.LVL57
 2562 034e 1C000000 		.4byte	.LFE14
 2563 0352 0800     		.2byte	0x8
 2564 0354 F3       		.byte	0xf3
 2565 0355 01       		.uleb128 0x1
 2566 0356 50       		.byte	0x50
 2567 0357 32       		.byte	0x32
 2568 0358 24       		.byte	0x24
 2569 0359 73       		.byte	0x73
 2570 035a 00       		.sleb128 0
 2571 035b 22       		.byte	0x22
 2572 035c 00000000 		.4byte	0
 2573 0360 00000000 		.4byte	0
 2574              	.LLST16:
 2575 0364 00000000 		.4byte	.LVL58
 2576 0368 0C000000 		.4byte	.LVL59
 2577 036c 0100     		.2byte	0x1
 2578 036e 50       		.byte	0x50
 2579 036f 0C000000 		.4byte	.LVL59
 2580 0373 44000000 		.4byte	.LVL65
 2581 0377 0100     		.2byte	0x1
 2582 0379 54       		.byte	0x54
 2583 037a 44000000 		.4byte	.LVL65
 2584 037e 5C000000 		.4byte	.LFE15
 2585 0382 0400     		.2byte	0x4
 2586 0384 F3       		.byte	0xf3
 2587 0385 01       		.uleb128 0x1
ARM GAS  C:\temp\ccklmfMt.s 			page 62


 2588 0386 50       		.byte	0x50
 2589 0387 9F       		.byte	0x9f
 2590 0388 00000000 		.4byte	0
 2591 038c 00000000 		.4byte	0
 2592              	.LLST17:
 2593 0390 00000000 		.4byte	.LVL58
 2594 0394 0F000000 		.4byte	.LVL60-1
 2595 0398 0100     		.2byte	0x1
 2596 039a 51       		.byte	0x51
 2597 039b 0F000000 		.4byte	.LVL60-1
 2598 039f 1A000000 		.4byte	.LVL61
 2599 03a3 0400     		.2byte	0x4
 2600 03a5 F3       		.byte	0xf3
 2601 03a6 01       		.uleb128 0x1
 2602 03a7 51       		.byte	0x51
 2603 03a8 9F       		.byte	0x9f
 2604 03a9 1A000000 		.4byte	.LVL61
 2605 03ad 28000000 		.4byte	.LVL62
 2606 03b1 0100     		.2byte	0x1
 2607 03b3 51       		.byte	0x51
 2608 03b4 32000000 		.4byte	.LVL63
 2609 03b8 36000000 		.4byte	.LVL64
 2610 03bc 0100     		.2byte	0x1
 2611 03be 51       		.byte	0x51
 2612 03bf 00000000 		.4byte	0
 2613 03c3 00000000 		.4byte	0
 2614              	.LLST18:
 2615 03c7 00000000 		.4byte	.LVL67
 2616 03cb 0C000000 		.4byte	.LVL68
 2617 03cf 0100     		.2byte	0x1
 2618 03d1 50       		.byte	0x50
 2619 03d2 0C000000 		.4byte	.LVL68
 2620 03d6 26000000 		.4byte	.LVL72
 2621 03da 0100     		.2byte	0x1
 2622 03dc 55       		.byte	0x55
 2623 03dd 26000000 		.4byte	.LVL72
 2624 03e1 40000000 		.4byte	.LFE16
 2625 03e5 0400     		.2byte	0x4
 2626 03e7 F3       		.byte	0xf3
 2627 03e8 01       		.uleb128 0x1
 2628 03e9 50       		.byte	0x50
 2629 03ea 9F       		.byte	0x9f
 2630 03eb 00000000 		.4byte	0
 2631 03ef 00000000 		.4byte	0
 2632              	.LLST19:
 2633 03f3 00000000 		.4byte	.LVL67
 2634 03f7 0F000000 		.4byte	.LVL69-1
 2635 03fb 0100     		.2byte	0x1
 2636 03fd 51       		.byte	0x51
 2637 03fe 0F000000 		.4byte	.LVL69-1
 2638 0402 1A000000 		.4byte	.LVL70
 2639 0406 0400     		.2byte	0x4
 2640 0408 F3       		.byte	0xf3
 2641 0409 01       		.uleb128 0x1
 2642 040a 51       		.byte	0x51
 2643 040b 9F       		.byte	0x9f
 2644 040c 1A000000 		.4byte	.LVL70
ARM GAS  C:\temp\ccklmfMt.s 			page 63


 2645 0410 23000000 		.4byte	.LVL71-1
 2646 0414 0100     		.2byte	0x1
 2647 0416 50       		.byte	0x50
 2648 0417 00000000 		.4byte	0
 2649 041b 00000000 		.4byte	0
 2650              	.LLST20:
 2651 041f 00000000 		.4byte	.LVL74
 2652 0423 0C000000 		.4byte	.LVL75
 2653 0427 0100     		.2byte	0x1
 2654 0429 50       		.byte	0x50
 2655 042a 0C000000 		.4byte	.LVL75
 2656 042e 28000000 		.4byte	.LVL80
 2657 0432 0100     		.2byte	0x1
 2658 0434 54       		.byte	0x54
 2659 0435 28000000 		.4byte	.LVL80
 2660 0439 48000000 		.4byte	.LFE17
 2661 043d 0400     		.2byte	0x4
 2662 043f F3       		.byte	0xf3
 2663 0440 01       		.uleb128 0x1
 2664 0441 50       		.byte	0x50
 2665 0442 9F       		.byte	0x9f
 2666 0443 00000000 		.4byte	0
 2667 0447 00000000 		.4byte	0
 2668              	.LLST21:
 2669 044b 00000000 		.4byte	.LVL74
 2670 044f 0F000000 		.4byte	.LVL76-1
 2671 0453 0100     		.2byte	0x1
 2672 0455 51       		.byte	0x51
 2673 0456 0F000000 		.4byte	.LVL76-1
 2674 045a 1A000000 		.4byte	.LVL77
 2675 045e 0400     		.2byte	0x4
 2676 0460 F3       		.byte	0xf3
 2677 0461 01       		.uleb128 0x1
 2678 0462 51       		.byte	0x51
 2679 0463 9F       		.byte	0x9f
 2680 0464 1A000000 		.4byte	.LVL77
 2681 0468 1D000000 		.4byte	.LVL78-1
 2682 046c 0100     		.2byte	0x1
 2683 046e 50       		.byte	0x50
 2684 046f 00000000 		.4byte	0
 2685 0473 00000000 		.4byte	0
 2686              		.section	.debug_aranges,"",%progbits
 2687 0000 A4000000 		.4byte	0xa4
 2688 0004 0200     		.2byte	0x2
 2689 0006 00000000 		.4byte	.Ldebug_info0
 2690 000a 04       		.byte	0x4
 2691 000b 00       		.byte	0
 2692 000c 0000     		.2byte	0
 2693 000e 0000     		.2byte	0
 2694 0010 00000000 		.4byte	.LFB1
 2695 0014 78010000 		.4byte	.LFE1-.LFB1
 2696 0018 00000000 		.4byte	.LFB2
 2697 001c 24000000 		.4byte	.LFE2-.LFB2
 2698 0020 00000000 		.4byte	.LFB0
 2699 0024 20000000 		.4byte	.LFE0-.LFB0
 2700 0028 00000000 		.4byte	.LFB3
 2701 002c 10000000 		.4byte	.LFE3-.LFB3
ARM GAS  C:\temp\ccklmfMt.s 			page 64


 2702 0030 00000000 		.4byte	.LFB4
 2703 0034 14000000 		.4byte	.LFE4-.LFB4
 2704 0038 00000000 		.4byte	.LFB5
 2705 003c 14000000 		.4byte	.LFE5-.LFB5
 2706 0040 00000000 		.4byte	.LFB6
 2707 0044 28000000 		.4byte	.LFE6-.LFB6
 2708 0048 00000000 		.4byte	.LFB7
 2709 004c 2C000000 		.4byte	.LFE7-.LFB7
 2710 0050 00000000 		.4byte	.LFB8
 2711 0054 10000000 		.4byte	.LFE8-.LFB8
 2712 0058 00000000 		.4byte	.LFB9
 2713 005c 1C000000 		.4byte	.LFE9-.LFB9
 2714 0060 00000000 		.4byte	.LFB10
 2715 0064 18000000 		.4byte	.LFE10-.LFB10
 2716 0068 00000000 		.4byte	.LFB11
 2717 006c 10000000 		.4byte	.LFE11-.LFB11
 2718 0070 00000000 		.4byte	.LFB12
 2719 0074 10000000 		.4byte	.LFE12-.LFB12
 2720 0078 00000000 		.4byte	.LFB13
 2721 007c 1C000000 		.4byte	.LFE13-.LFB13
 2722 0080 00000000 		.4byte	.LFB14
 2723 0084 1C000000 		.4byte	.LFE14-.LFB14
 2724 0088 00000000 		.4byte	.LFB15
 2725 008c 5C000000 		.4byte	.LFE15-.LFB15
 2726 0090 00000000 		.4byte	.LFB16
 2727 0094 40000000 		.4byte	.LFE16-.LFB16
 2728 0098 00000000 		.4byte	.LFB17
 2729 009c 48000000 		.4byte	.LFE17-.LFB17
 2730 00a0 00000000 		.4byte	0
 2731 00a4 00000000 		.4byte	0
 2732              		.section	.debug_ranges,"",%progbits
 2733              	.Ldebug_ranges0:
 2734 0000 00000000 		.4byte	.LFB1
 2735 0004 78010000 		.4byte	.LFE1
 2736 0008 00000000 		.4byte	.LFB2
 2737 000c 24000000 		.4byte	.LFE2
 2738 0010 00000000 		.4byte	.LFB0
 2739 0014 20000000 		.4byte	.LFE0
 2740 0018 00000000 		.4byte	.LFB3
 2741 001c 10000000 		.4byte	.LFE3
 2742 0020 00000000 		.4byte	.LFB4
 2743 0024 14000000 		.4byte	.LFE4
 2744 0028 00000000 		.4byte	.LFB5
 2745 002c 14000000 		.4byte	.LFE5
 2746 0030 00000000 		.4byte	.LFB6
 2747 0034 28000000 		.4byte	.LFE6
 2748 0038 00000000 		.4byte	.LFB7
 2749 003c 2C000000 		.4byte	.LFE7
 2750 0040 00000000 		.4byte	.LFB8
 2751 0044 10000000 		.4byte	.LFE8
 2752 0048 00000000 		.4byte	.LFB9
 2753 004c 1C000000 		.4byte	.LFE9
 2754 0050 00000000 		.4byte	.LFB10
 2755 0054 18000000 		.4byte	.LFE10
 2756 0058 00000000 		.4byte	.LFB11
 2757 005c 10000000 		.4byte	.LFE11
 2758 0060 00000000 		.4byte	.LFB12
ARM GAS  C:\temp\ccklmfMt.s 			page 65


 2759 0064 10000000 		.4byte	.LFE12
 2760 0068 00000000 		.4byte	.LFB13
 2761 006c 1C000000 		.4byte	.LFE13
 2762 0070 00000000 		.4byte	.LFB14
 2763 0074 1C000000 		.4byte	.LFE14
 2764 0078 00000000 		.4byte	.LFB15
 2765 007c 5C000000 		.4byte	.LFE15
 2766 0080 00000000 		.4byte	.LFB16
 2767 0084 40000000 		.4byte	.LFE16
 2768 0088 00000000 		.4byte	.LFB17
 2769 008c 48000000 		.4byte	.LFE17
 2770 0090 00000000 		.4byte	0
 2771 0094 00000000 		.4byte	0
 2772              		.section	.debug_line,"",%progbits
 2773              	.Ldebug_line0:
 2774 0000 9A020000 		.section	.debug_str,"MS",%progbits,1
 2774      02005700 
 2774      00000201 
 2774      FB0E0D00 
 2774      01010101 
 2775              	.LASF58:
 2776 0000 4144435F 		.ascii	"ADC_SAR_Seq_1_offset\000"
 2776      5341525F 
 2776      5365715F 
 2776      315F6F66 
 2776      66736574 
 2777              	.LASF10:
 2778 0015 75696E74 		.ascii	"uint16\000"
 2778      313600
 2779              	.LASF26:
 2780 001c 4144435F 		.ascii	"ADC_SAR_Seq_1_Init\000"
 2780      5341525F 
 2780      5365715F 
 2780      315F496E 
 2780      697400
 2781              	.LASF49:
 2782 002f 61646347 		.ascii	"adcGain\000"
 2782      61696E00 
 2783              	.LASF24:
 2784 0037 636F756E 		.ascii	"counts\000"
 2784      747300
 2785              	.LASF30:
 2786 003e 4144435F 		.ascii	"ADC_SAR_Seq_1_StartConvert\000"
 2786      5341525F 
 2786      5365715F 
 2786      315F5374 
 2786      61727443 
 2787              	.LASF45:
 2788 0059 4144435F 		.ascii	"ADC_SAR_Seq_1_SetSatMask\000"
 2788      5341525F 
 2788      5365715F 
 2788      315F5365 
 2788      74536174 
 2789              	.LASF28:
 2790 0072 4144435F 		.ascii	"ADC_SAR_Seq_1_Start\000"
 2790      5341525F 
 2790      5365715F 
ARM GAS  C:\temp\ccklmfMt.s 			page 66


 2790      315F5374 
 2790      61727400 
 2791              	.LASF7:
 2792 0086 6C6F6E67 		.ascii	"long long unsigned int\000"
 2792      206C6F6E 
 2792      6720756E 
 2792      7369676E 
 2792      65642069 
 2793              	.LASF27:
 2794 009d 4144435F 		.ascii	"ADC_SAR_Seq_1_Enable\000"
 2794      5341525F 
 2794      5365715F 
 2794      315F456E 
 2794      61626C65 
 2795              	.LASF25:
 2796 00b2 4144435F 		.ascii	"ADC_SAR_Seq_1_InputsPlacement\000"
 2796      5341525F 
 2796      5365715F 
 2796      315F496E 
 2796      70757473 
 2797              	.LASF34:
 2798 00d0 4144435F 		.ascii	"ADC_SAR_Seq_1_GetResult16\000"
 2798      5341525F 
 2798      5365715F 
 2798      315F4765 
 2798      74526573 
 2799              	.LASF6:
 2800 00ea 6C6F6E67 		.ascii	"long long int\000"
 2800      206C6F6E 
 2800      6720696E 
 2800      7400
 2801              	.LASF0:
 2802 00f8 7369676E 		.ascii	"signed char\000"
 2802      65642063 
 2802      68617200 
 2803              	.LASF42:
 2804 0104 4144435F 		.ascii	"ADC_SAR_Seq_1_SetHighLimit\000"
 2804      5341525F 
 2804      5365715F 
 2804      315F5365 
 2804      74486967 
 2805              	.LASF13:
 2806 011f 696E7433 		.ascii	"int32\000"
 2806      3200
 2807              	.LASF53:
 2808 0125 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_uVolts\000"
 2808      5341525F 
 2808      5365715F 
 2808      315F436F 
 2808      756E7473 
 2809              	.LASF4:
 2810 0143 6C6F6E67 		.ascii	"long int\000"
 2810      20696E74 
 2810      00
 2811              	.LASF64:
 2812 014c 433A5C55 		.ascii	"C:\\Users\\BEAST\\Desktop\\GITHUB PSOC PLANTE\\PSoC"
 2812      73657273 
ARM GAS  C:\temp\ccklmfMt.s 			page 67


 2812      5C424541 
 2812      53545C44 
 2812      65736B74 
 2813 017a 5C506C61 		.ascii	"\\Plant_control2_0.cydsn\000"
 2813      6E745F63 
 2813      6F6E7472 
 2813      6F6C325F 
 2813      302E6379 
 2814              	.LASF9:
 2815 0192 75696E74 		.ascii	"uint8\000"
 2815      3800
 2816              	.LASF61:
 2817 0198 43794465 		.ascii	"CyDelayUs\000"
 2817      6C617955 
 2817      7300
 2818              	.LASF16:
 2819 01a2 646F7562 		.ascii	"double\000"
 2819      6C6500
 2820              	.LASF11:
 2821 01a9 75696E74 		.ascii	"uint32\000"
 2821      333200
 2822              	.LASF39:
 2823 01b0 6D61736B 		.ascii	"mask\000"
 2823      00
 2824              	.LASF50:
 2825 01b5 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_mVolts\000"
 2825      5341525F 
 2825      5365715F 
 2825      315F436F 
 2825      756E7473 
 2826              	.LASF35:
 2827 01d3 7265744D 		.ascii	"retMode\000"
 2827      6F646500 
 2828              	.LASF57:
 2829 01db 4144435F 		.ascii	"ADC_SAR_Seq_1_initVar\000"
 2829      5341525F 
 2829      5365715F 
 2829      315F696E 
 2829      69745661 
 2830              	.LASF8:
 2831 01f1 756E7369 		.ascii	"unsigned int\000"
 2831      676E6564 
 2831      20696E74 
 2831      00
 2832              	.LASF65:
 2833 01fe 75566F6C 		.ascii	"uVolts\000"
 2833      747300
 2834              	.LASF5:
 2835 0205 6C6F6E67 		.ascii	"long unsigned int\000"
 2835      20756E73 
 2835      69676E65 
 2835      6420696E 
 2835      7400
 2836              	.LASF55:
 2837 0217 766F6C74 		.ascii	"volts\000"
 2837      7300
 2838              	.LASF23:
ARM GAS  C:\temp\ccklmfMt.s 			page 68


 2839 021d 746D7052 		.ascii	"tmpRegVal\000"
 2839      65675661 
 2839      6C00
 2840              	.LASF3:
 2841 0227 73686F72 		.ascii	"short unsigned int\000"
 2841      7420756E 
 2841      7369676E 
 2841      65642069 
 2841      6E7400
 2842              	.LASF66:
 2843 023a 4379496E 		.ascii	"CyIntSetVector\000"
 2843      74536574 
 2843      56656374 
 2843      6F7200
 2844              	.LASF56:
 2845 0249 4144435F 		.ascii	"ADC_SAR_Seq_1_channelsConfig\000"
 2845      5341525F 
 2845      5365715F 
 2845      315F6368 
 2845      616E6E65 
 2846              	.LASF52:
 2847 0266 6D566F6C 		.ascii	"mVolts\000"
 2847      747300
 2848              	.LASF19:
 2849 026d 72656733 		.ascii	"reg32\000"
 2849      3200
 2850              	.LASF63:
 2851 0273 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c\000"
 2851      6E657261 
 2851      7465645F 
 2851      536F7572 
 2851      63655C50 
 2852              	.LASF14:
 2853 029c 666C6F61 		.ascii	"float32\000"
 2853      74333200 
 2854              	.LASF21:
 2855 02a4 73697A65 		.ascii	"sizetype\000"
 2855      74797065 
 2855      00
 2856              	.LASF41:
 2857 02ad 6C6F774C 		.ascii	"lowLimit\000"
 2857      696D6974 
 2857      00
 2858              	.LASF33:
 2859 02b6 4144435F 		.ascii	"ADC_SAR_Seq_1_IsEndConversion\000"
 2859      5341525F 
 2859      5365715F 
 2859      315F4973 
 2859      456E6443 
 2860              	.LASF31:
 2861 02d4 4144435F 		.ascii	"ADC_SAR_Seq_1_StopConvert\000"
 2861      5341525F 
 2861      5365715F 
 2861      315F5374 
 2861      6F70436F 
 2862              	.LASF62:
 2863 02ee 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
ARM GAS  C:\temp\ccklmfMt.s 			page 69


 2863      4320342E 
 2863      392E3320 
 2863      32303135 
 2863      30333033 
 2864 0321 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 2864      20726576 
 2864      6973696F 
 2864      6E203232 
 2864      31323230 
 2865 0354 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 2865      66756E63 
 2865      74696F6E 
 2865      2D736563 
 2865      74696F6E 
 2866              	.LASF17:
 2867 037c 696E7436 		.ascii	"int64\000"
 2867      3400
 2868              	.LASF60:
 2869 0382 4379496E 		.ascii	"CyIntSetPriority\000"
 2869      74536574 
 2869      5072696F 
 2869      72697479 
 2869      00
 2870              	.LASF15:
 2871 0393 666C6F61 		.ascii	"float\000"
 2871      7400
 2872              	.LASF48:
 2873 0399 4144435F 		.ascii	"ADC_SAR_Seq_1_SetGain\000"
 2873      5341525F 
 2873      5365715F 
 2873      315F5365 
 2873      74476169 
 2874              	.LASF29:
 2875 03af 4144435F 		.ascii	"ADC_SAR_Seq_1_Stop\000"
 2875      5341525F 
 2875      5365715F 
 2875      315F5374 
 2875      6F7000
 2876              	.LASF43:
 2877 03c2 68696768 		.ascii	"highLimit\000"
 2877      4C696D69 
 2877      7400
 2878              	.LASF67:
 2879 03cc 43794861 		.ascii	"CyHalt\000"
 2879      6C7400
 2880              	.LASF1:
 2881 03d3 756E7369 		.ascii	"unsigned char\000"
 2881      676E6564 
 2881      20636861 
 2881      7200
 2882              	.LASF2:
 2883 03e1 73686F72 		.ascii	"short int\000"
 2883      7420696E 
 2883      7400
 2884              	.LASF54:
 2885 03eb 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_Volts\000"
 2885      5341525F 
ARM GAS  C:\temp\ccklmfMt.s 			page 70


 2885      5365715F 
 2885      315F436F 
 2885      756E7473 
 2886              	.LASF38:
 2887 0408 4144435F 		.ascii	"ADC_SAR_Seq_1_SetChanMask\000"
 2887      5341525F 
 2887      5365715F 
 2887      315F5365 
 2887      74436861 
 2888              	.LASF22:
 2889 0422 63684E75 		.ascii	"chNum\000"
 2889      6D00
 2890              	.LASF36:
 2891 0428 6368616E 		.ascii	"chan\000"
 2891      00
 2892              	.LASF18:
 2893 042d 63686172 		.ascii	"char\000"
 2893      00
 2894              	.LASF20:
 2895 0432 63796973 		.ascii	"cyisraddress\000"
 2895      72616464 
 2895      72657373 
 2895      00
 2896              	.LASF40:
 2897 043f 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLowLimit\000"
 2897      5341525F 
 2897      5365715F 
 2897      315F5365 
 2897      744C6F77 
 2898              	.LASF47:
 2899 0459 6F666673 		.ascii	"offset\000"
 2899      657400
 2900              	.LASF51:
 2901 0460 61646343 		.ascii	"adcCounts\000"
 2901      6F756E74 
 2901      7300
 2902              	.LASF59:
 2903 046a 4144435F 		.ascii	"ADC_SAR_Seq_1_countsPer10Volt\000"
 2903      5341525F 
 2903      5365715F 
 2903      315F636F 
 2903      756E7473 
 2904              	.LASF32:
 2905 0488 73746174 		.ascii	"status\000"
 2905      757300
 2906              	.LASF46:
 2907 048f 4144435F 		.ascii	"ADC_SAR_Seq_1_SetOffset\000"
 2907      5341525F 
 2907      5365715F 
 2907      315F5365 
 2907      744F6666 
 2908              	.LASF12:
 2909 04a7 696E7431 		.ascii	"int16\000"
 2909      3600
 2910              	.LASF44:
 2911 04ad 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLimitMask\000"
 2911      5341525F 
ARM GAS  C:\temp\ccklmfMt.s 			page 71


 2911      5365715F 
 2911      315F5365 
 2911      744C696D 
 2912              	.LASF37:
 2913 04c8 72657375 		.ascii	"result\000"
 2913      6C7400
 2914              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
